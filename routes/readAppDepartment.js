/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppDepartmentRead',
    Heading:'AppDepartment',
    DepartmentId:{label :'DepartmentId'},
    DepartmentName:{label :'DepartmentName'},
    DepartmentDesc:{label :'DepartmentDesc'},
    AppBankCrFa:{Heading:'AppBankCrFa',
        BankCashReceiveDetailId:{header:'BankCashReceiveDetailId'},
        BankCashReceiveId:{header:'BankCashReceiveId'},
        AccountNo:{header:'AccountNo'},
        DepartmentId:{header:'DepartmentId'},
        Amount:{header:'Amount'},
        JobOrderNo:{header:'JobOrderNo'},
        },
    AppBankWcFa:{Heading:'AppBankWcFa',
        BankWcFaId:{header:'BankWcFaId'},
        BankWriteCheckId:{header:'BankWriteCheckId'},
        AccountNo:{header:'AccountNo'},
        DepartmentId:{header:'DepartmentId'},
        Amount:{header:'Amount'},
        JobOrderNo:{header:'JobOrderNo'},
        },
    AppChartOfAccount:{Heading:'AppChartOfAccount',
        ChartOfAccountId:{header:'ChartOfAccountId'},
        AccountSubClassId:{header:'AccountSubClassId'},
        AccountNo:{header:'AccountNo'},
        AccountName:{header:'AccountName'},
        IsCashOrBank:{header:'IsCashOrBank'},
        IsNotActive:{header:'IsNotActive'},
        CurrencyId:{header:'CurrencyId'},
        DepartmentId:{header:'DepartmentId'},
        NormalBalance:{header:'NormalBalance'},
        },
    AppEmployee:{Heading:'AppEmployee',
        EmployeeId:{header:'EmployeeId'},
        EmployeeNumber:{header:'EmployeeNumber'},
        Firstname:{header:'Firstname'},
        Middlename:{header:'Middlename'},
        Lastname:{header:'Lastname'},
        Nationality:{header:'Nationality'},
        Dob:{header:'Dob'},
        Gender:{header:'Gender'},
        MaritalStatus:{header:'MaritalStatus'},
        Ethnicity:{header:'Ethnicity'},
        KtpNumber:{header:'KtpNumber'},
        PassportNumber:{header:'PassportNumber'},
        DrivingLicenceNo:{header:'DrivingLicenceNo'},
        AddressLine1:{header:'AddressLine1'},
        AddressLine2:{header:'AddressLine2'},
        CityId:{header:'CityId'},
        CountryId:{header:'CountryId'},
        ProvinceId:{header:'ProvinceId'},
        PostalCode:{header:'PostalCode'},
        HomePhone:{header:'HomePhone'},
        MobilePhone:{header:'MobilePhone'},
        WorkEmail:{header:'WorkEmail'},
        PrivateEmail:{header:'PrivateEmail'},
        JoinedDate:{header:'JoinedDate'},
        ConfirmationDate:{header:'ConfirmationDate'},
        TerminationDate:{header:'TerminationDate'},
        SupervisorName:{header:'SupervisorName'},
        IndirectSupervisorName:{header:'IndirectSupervisorName'},
        FirstLevelApprover:{header:'FirstLevelApprover'},
        SecondLevelApprover:{header:'SecondLevelApprover'},
        ThirdLevelApprover:{header:'ThirdLevelApprover'},
        Notes:{header:'Notes'},
        DepartmentId:{header:'DepartmentId'},
        WorkStationId:{header:'WorkStationId'},
        JobTitleId:{header:'JobTitleId'},
        PayGradeId:{header:'PayGradeId'},
        EmploymentStatusId:{header:'EmploymentStatusId'},
        },
    AppProductCategory:{Heading:'AppProductCategory',
        ProductCategoryId:{header:'ProductCategoryId'},
        CategoryName:{header:'CategoryName'},
        Location:{header:'Location'},
        DepartmentId:{header:'DepartmentId'},
        IsInventory:{header:'IsInventory'},
        IsPurchased:{header:'IsPurchased'},
        IsSold:{header:'IsSold'},
        InventoryMethod:{header:'InventoryMethod'},
        AcctCodeCogs:{header:'AcctCodeCogs'},
        AcctCodeSales:{header:'AcctCodeSales'},
        AcctCodeSalesReturn:{header:'AcctCodeSalesReturn'},
        AcctCodeInventory:{header:'AcctCodeInventory'},
        AcctCodeConsignment:{header:'AcctCodeConsignment'},
        Image:{header:'Image'},
        },
    AppRecurringBankCrFa:{Heading:'AppRecurringBankCrFa',
        RecurringBankCrFaId:{header:'RecurringBankCrFaId'},
        RecurringBankCashReceiveId:{header:'RecurringBankCashReceiveId'},
        AccountNo:{header:'AccountNo'},
        DepartmentId:{header:'DepartmentId'},
        Amount:{header:'Amount'},
        JobOrderNo:{header:'JobOrderNo'},
        },
    AppRecurringBankWcFa:{Heading:'AppRecurringBankWcFa',
        RecurringBankWcFaId:{header:'RecurringBankWcFaId'},
        RecurringBankWriteCheckId:{header:'RecurringBankWriteCheckId'},
        AccountNo:{header:'AccountNo'},
        DepartmentId:{header:'DepartmentId'},
        Amount:{header:'Amount'},
        JobOrderNo:{header:'JobOrderNo'},
        },
    AppRptBalanceSheet:{Heading:'AppRptBalanceSheet',
        RptBalanceSheetId:{header:'RptBalanceSheetId'},
        RptBalanceSheetName:{header:'RptBalanceSheetName'},
        DepartmentFrom:{header:'DepartmentFrom'},
        DepartmentTo:{header:'DepartmentTo'},
        CurrencyId:{header:'CurrencyId'},
        AccountClassId:{header:'AccountClassId'},
        AccountSubClassId:{header:'AccountSubClassId'},
        AccountNo:{header:'AccountNo'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        ComparativeEndingBalanceDebit:{header:'ComparativeEndingBalanceDebit'},
        ComparativeEndingBalanceCredit:{header:'ComparativeEndingBalanceCredit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    AppRptProfitAndLoss:{Heading:'AppRptProfitAndLoss',
        RptProfitAndLossId:{header:'RptProfitAndLossId'},
        RptProfitAndLossName:{header:'RptProfitAndLossName'},
        DepartmentFrom:{header:'DepartmentFrom'},
        DepartmentTo:{header:'DepartmentTo'},
        CurrencyId:{header:'CurrencyId'},
        Revenue:{header:'Revenue'},
        RevenueExpenditure:{header:'RevenueExpenditure'},
        GrossMargin:{header:'GrossMargin'},
        OperationalExpenditure:{header:'OperationalExpenditure'},
        OperatingProfit:{header:'OperatingProfit'},
        OtherRevenue:{header:'OtherRevenue'},
        OtherExpenditure:{header:'OtherExpenditure'},
        NetProfit:{header:'NetProfit'},
        ComparativeRevenue:{header:'ComparativeRevenue'},
        ComparativeRevenueExpenditure:{header:'ComparativeRevenueExpenditure'},
        ComparativeGrossMargin:{header:'ComparativeGrossMargin'},
        ComparativeOperationalExpenditure:{header:'ComparativeOperationalExpenditure'},
        ComparativeOperatingProfit:{header:'ComparativeOperatingProfit'},
        ComparativeOtherRevenue:{header:'ComparativeOtherRevenue'},
        ComparativeOtherExpenditure:{header:'ComparativeOtherExpenditure'},
        ComparativeNetProfit:{header:'ComparativeNetProfit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    AppRptTrialBalance:{Heading:'AppRptTrialBalance',
        RptTrialBalanceId:{header:'RptTrialBalanceId'},
        RptTrialBalanceName:{header:'RptTrialBalanceName'},
        DepartmentFrom:{header:'DepartmentFrom'},
        DepartmentTo:{header:'DepartmentTo'},
        CurrencyId:{header:'CurrencyId'},
        AccountNo:{header:'AccountNo'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppDepartment?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppDepartment = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppDepartment(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppDepartment');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appBankCrFa = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppBankCrFa(jsonObj,function(err,rows) {
                jsonObj.appBankCrFa = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appBankWcFa = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppBankWcFa(jsonObj,function(err,rows) {
                jsonObj.appBankWcFa = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appChartOfAccount = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppChartOfAccount(jsonObj,function(err,rows) {
                jsonObj.appChartOfAccount = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appEmployee = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppEmployee(jsonObj,function(err,rows) {
                jsonObj.appEmployee = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appProductCategory = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppProductCategory(jsonObj,function(err,rows) {
                jsonObj.appProductCategory = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRecurringBankCrFa = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRecurringBankCrFa(jsonObj,function(err,rows) {
                jsonObj.appRecurringBankCrFa = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRecurringBankWcFa = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRecurringBankWcFa(jsonObj,function(err,rows) {
                jsonObj.appRecurringBankWcFa = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptBalanceSheet = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptBalanceSheet(jsonObj,function(err,rows) {
                jsonObj.appRptBalanceSheet = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptProfitAndLoss = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptProfitAndLoss(jsonObj,function(err,rows) {
                jsonObj.appRptProfitAndLoss = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptTrialBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptTrialBalance(jsonObj,function(err,rows) {
                jsonObj.appRptTrialBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppDepartmentReadPage',parameter);
    }    
    Promise.all([readAppDepartment,appBankCrFa,appBankWcFa,appChartOfAccount,appEmployee,appProductCategory,appRecurringBankCrFa,appRecurringBankWcFa,appRptBalanceSheet,appRptProfitAndLoss,appRptTrialBalance]).then(sendResult);
});

module.exports = router;
