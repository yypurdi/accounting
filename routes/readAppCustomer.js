/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppCustomerRead',
    Heading:'AppCustomer',
    CustomerId:{label :'CustomerId'},
    CustNo:{label :'CustNo'},
    CustName:{label :'CustName'},
    CustType:{label :'CustType'},
    CustClassification:{label :'CustClassification'},
    CustCategory:{label :'CustCategory'},
    ContactPerson:{label :'ContactPerson'},
    ContactPosition:{label :'ContactPosition'},
    ContactPersonMobilePhone:{label :'ContactPersonMobilePhone'},
    ContactPersonEmail:{label :'ContactPersonEmail'},
    CustTaxId:{label :'CustTaxId'},
    CustCreditLimit:{label :'CustCreditLimit'},
    CustPhone1:{label :'CustPhone1'},
    CustPhone2:{label :'CustPhone2'},
    CustFax:{label :'CustFax'},
    CustEmailCompany:{label :'CustEmailCompany'},
    CustWebsite:{label :'CustWebsite'},
    CustCurrency:{label :'CustCurrency'},
    CustAddress1:{label :'CustAddress1'},
    CustAddress2:{label :'CustAddress2'},
    CustPostalCode:{label :'CustPostalCode'},
    CityId:{label :'CityId'},
    ProvinceId:{label :'ProvinceId'},
    CountryId:{label :'CountryId'},
    DeliveryAddress1:{label :'DeliveryAddress1'},
    DeliveryAddress2:{label :'DeliveryAddress2'},
    DeliveryAddressPostalCode:{label :'DeliveryAddressPostalCode'},
    DeliveryAddressCity:{label :'DeliveryAddressCity'},
    DeliveryAddressProvince:{label :'DeliveryAddressProvince'},
    DeliveryAddressCountry:{label :'DeliveryAddressCountry'},
    ContactPerson2nd:{label :'ContactPerson2nd'},
    ContactPosition2nd:{label :'ContactPosition2nd'},
    ContactPersonMobilePhone2nd:{label :'ContactPersonMobilePhone2nd'},
    ContactPersonEmail2nd:{label :'ContactPersonEmail2nd'},
    ContactPerson3rd:{label :'ContactPerson3rd'},
    ContactPosition3rd:{label :'ContactPosition3rd'},
    ContactPersonMobilePhone3rd:{label :'ContactPersonMobilePhone3rd'},
    ContactPersonEmail3rd:{label :'ContactPersonEmail3rd'},
    Image:{label :'Image'},
    NotesDetails:{label :'NotesDetails'},
    Status:{label :'Status'},
    FirstContactDate:{label :'FirstContactDate'},
    AppArAging:{Heading:'AppArAging',
        ArAgingId:{header:'ArAgingId'},
        CustomerId:{header:'CustomerId'},
        ReferenceNo:{header:'ReferenceNo'},
        Debit:{header:'Debit'},
        Credit:{header:'Credit'},
        ArDueDate:{header:'ArDueDate'},
        CurrentDate:{header:'CurrentDate'},
        Age:{header:'Age'},
        },
    AppArCustomerDetail:{Heading:'AppArCustomerDetail',
        ArCustomerDetailId:{header:'ArCustomerDetailId'},
        CustomerId:{header:'CustomerId'},
        Date:{header:'Date'},
        Note:{header:'Note'},
        Debit:{header:'Debit'},
        Credit:{header:'Credit'},
        DebitBalance:{header:'DebitBalance'},
        CreditBalance:{header:'CreditBalance'},
        Balance:{header:'Balance'},
        ReferenceNo:{header:'ReferenceNo'},
        ArDueDate:{header:'ArDueDate'},
        Status:{header:'Status'},
        },
    AppArOpeningBalance:{Heading:'AppArOpeningBalance',
        ArOpeningBalanceId:{header:'ArOpeningBalanceId'},
        CustomerId:{header:'CustomerId'},
        Date:{header:'Date'},
        InvoiceNo:{header:'InvoiceNo'},
        PurchaseOrderNo:{header:'PurchaseOrderNo'},
        CurrencyId:{header:'CurrencyId'},
        ReceivableValue:{header:'ReceivableValue'},
        TermOfPaymentId:{header:'TermOfPaymentId'},
        },
    AppProject:{Heading:'AppProject',
        ProjectId:{header:'ProjectId'},
        Name:{header:'Name'},
        ProjectManager:{header:'ProjectManager'},
        Details:{header:'Details'},
        Status:{header:'Status'},
        CustomerId:{header:'CustomerId'},
        IsJobOrder:{header:'IsJobOrder'},
        IsActive:{header:'IsActive'},
        JobOrderNo:{header:'JobOrderNo'},
        IsUsePhase:{header:'IsUsePhase'},
        OrderDate:{header:'OrderDate'},
        DeliveryDate:{header:'DeliveryDate'},
        ContactPerson:{header:'ContactPerson'},
        PercentageFinish:{header:'PercentageFinish'},
        EstimationCostBudget:{header:'EstimationCostBudget'},
        EstimationIncomeBudget:{header:'EstimationIncomeBudget'},
        },
    AppSummaryArAging:{Heading:'AppSummaryArAging',
        ArAgingId:{header:'ArAgingId'},
        CustomerId:{header:'CustomerId'},
        CurrentDate:{header:'CurrentDate'},
        Day030:{header:'Day030'},
        Day3060:{header:'Day3060'},
        Day6090:{header:'Day6090'},
        DayMoreThan90:{header:'DayMoreThan90'},
        },
    AppSummaryArCustomer:{Heading:'AppSummaryArCustomer',
        SummaryArCustomerId:{header:'SummaryArCustomerId'},
        CustomerId:{header:'CustomerId'},
        Date:{header:'Date'},
        BeginningBalanceDebit:{header:'BeginningBalanceDebit'},
        BeginningBalanceCredit:{header:'BeginningBalanceCredit'},
        DebitMutation:{header:'DebitMutation'},
        CreditMutation:{header:'CreditMutation'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        BeginningBalance:{header:'BeginningBalance'},
        DeltaFromBegToEnd:{header:'DeltaFromBegToEnd'},
        EndingBalance:{header:'EndingBalance'},
        Paid:{header:'Paid'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppCustomer?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppCustomer = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppCustomer(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppCustomer');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appArAging = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppArAging(jsonObj,function(err,rows) {
                jsonObj.appArAging = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appArCustomerDetail = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppArCustomerDetail(jsonObj,function(err,rows) {
                jsonObj.appArCustomerDetail = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appArOpeningBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppArOpeningBalance(jsonObj,function(err,rows) {
                jsonObj.appArOpeningBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appProject = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppProject(jsonObj,function(err,rows) {
                jsonObj.appProject = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appSummaryArAging = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppSummaryArAging(jsonObj,function(err,rows) {
                jsonObj.appSummaryArAging = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appSummaryArCustomer = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppSummaryArCustomer(jsonObj,function(err,rows) {
                jsonObj.appSummaryArCustomer = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppCustomerReadPage',parameter);
    }    
    Promise.all([readAppCustomer,appArAging,appArCustomerDetail,appArOpeningBalance,appProject,appSummaryArAging,appSummaryArCustomer]).then(sendResult);
});

module.exports = router;
