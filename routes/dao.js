/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */

const mysql = require('mysql');
const mqtt = require('mqtt');
const mybatisMapper = require('mybatis-mapper');

const mqttUsername = 'admin';
const mqttPassword = '1234';
const dbpool = mysql.createPool({
    connectionLimit : 100,
    host: 'localhost',
    user: 'root',
    password : '',
    database: 'db_akuntansi',
    debug    :  false
});

const createQuery = function(mapper,namespace,method,jsonObj){
    mybatisMapper.createMapper(mapper);
    var format = {language: 'sql', indent: '  '};
    var query = mybatisMapper.getStatement(namespace,method, jsonObj, format);
    return query;
}
    
const options = {
  port: 1883,
  host: 'mqtt://localhost',
  clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),
  username: mqttUsername,
  password: mqttPassword,
  keepalive: 60,
  reconnectPeriod: 1000,
  protocolId: 'MQTT',
  clean: true,
  encoding: 'utf8'
};

const connector = mqtt.connect("mqtt://localhost",options);

connector.on('connect', function () {
  console.log('Connected to middleware ('+options.host+':'+options.port+')');
  connector.subscribe('sensor/'+mqttUsername+'/post');
});

module.exports = {

    Dao: class Dao {

        constructor() {
            this.connector = connector;
        }
          
        getMqttConnector(){
            return this.connector;
        }

        searchAppAccountClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountClassSearchMapper.xml'], 'searchAppAccountClassMapper', 'searchAppAccountClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppAccountSubClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountSubClassSearchMapper.xml'], 'searchAppAccountSubClassMapper', 'searchAppAccountSubClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppAdjustmentJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAdjustmentJournalSearchMapper.xml'], 'searchAppAdjustmentJournalMapper', 'searchAppAdjustmentJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApAgingSearchMapper.xml'], 'searchAppApAgingMapper', 'searchAppApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppApOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApOpeningBalanceSearchMapper.xml'], 'searchAppApOpeningBalanceMapper', 'searchAppApOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppApVendorDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApVendorDetailSearchMapper.xml'], 'searchAppApVendorDetailMapper', 'searchAppApVendorDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppApWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApWriteoffVerificationSearchMapper.xml'], 'searchAppApWriteoffVerificationMapper', 'searchAppApWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArAgingSearchMapper.xml'], 'searchAppArAgingMapper', 'searchAppArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppArCustomerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArCustomerDetailSearchMapper.xml'], 'searchAppArCustomerDetailMapper', 'searchAppArCustomerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppArOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArOpeningBalanceSearchMapper.xml'], 'searchAppArOpeningBalanceMapper', 'searchAppArOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppArWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArWriteoffVerificationSearchMapper.xml'], 'searchAppArWriteoffVerificationMapper', 'searchAppArWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesSearchMapper.xml'], 'searchAppAuthoritiesMapper', 'searchAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBackupInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBackupInfoSearchMapper.xml'], 'searchAppBackupInfoMapper', 'searchAppBackupInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankCashReceive(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCashReceiveSearchMapper.xml'], 'searchAppBankCashReceiveMapper', 'searchAppBankCashReceive', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCrFaSearchMapper.xml'], 'searchAppBankCrFaMapper', 'searchAppBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankData(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankDataSearchMapper.xml'], 'searchAppBankDataMapper', 'searchAppBankData', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankFundTransfer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankFundTransferSearchMapper.xml'], 'searchAppBankFundTransferMapper', 'searchAppBankFundTransfer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankReconciliation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationSearchMapper.xml'], 'searchAppBankReconciliationMapper', 'searchAppBankReconciliation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankReconciliationDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationDetailSearchMapper.xml'], 'searchAppBankReconciliationDetailMapper', 'searchAppBankReconciliationDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWcFaSearchMapper.xml'], 'searchAppBankWcFaMapper', 'searchAppBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWriteCheckSearchMapper.xml'], 'searchAppBankWriteCheckMapper', 'searchAppBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppBudgetInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBudgetInfoSearchMapper.xml'], 'searchAppBudgetInfoMapper', 'searchAppBudgetInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppChartOfAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppChartOfAccountSearchMapper.xml'], 'searchAppChartOfAccountMapper', 'searchAppChartOfAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCompanyInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoSearchMapper.xml'], 'searchAppCompanyInfoMapper', 'searchAppCompanyInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCompanyInfoAccPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoAccPeriodSearchMapper.xml'], 'searchAppCompanyInfoAccPeriodMapper', 'searchAppCompanyInfoAccPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactSearchMapper.xml'], 'searchAppContactMapper', 'searchAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppControlAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppControlAccountSearchMapper.xml'], 'searchAppControlAccountMapper', 'searchAppControlAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCurrency(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencySearchMapper.xml'], 'searchAppCurrencyMapper', 'searchAppCurrency', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCurrencyFluctuation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyFluctuationSearchMapper.xml'], 'searchAppCurrencyFluctuationMapper', 'searchAppCurrencyFluctuation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCurrencyRevaluation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyRevaluationSearchMapper.xml'], 'searchAppCurrencyRevaluationMapper', 'searchAppCurrencyRevaluation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerSearchMapper.xml'], 'searchAppCustomerMapper', 'searchAppCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCustomerTermOfPay(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfPaySearchMapper.xml'], 'searchAppCustomerTermOfPayMapper', 'searchAppCustomerTermOfPay', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppCustomerTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfSalesSearchMapper.xml'], 'searchAppCustomerTermOfSalesMapper', 'searchAppCustomerTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppDepartment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppDepartmentSearchMapper.xml'], 'searchAppDepartmentMapper', 'searchAppDepartment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppEmployee(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmployeeSearchMapper.xml'], 'searchAppEmployeeMapper', 'searchAppEmployee', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppEmploymentStatus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmploymentStatusSearchMapper.xml'], 'searchAppEmploymentStatusMapper', 'searchAppEmploymentStatus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGeneralJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalSearchMapper.xml'], 'searchAppGeneralJournalMapper', 'searchAppGeneralJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGeneralJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalItemsSearchMapper.xml'], 'searchAppGeneralJournalItemsMapper', 'searchAppGeneralJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGeneralLedgerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralLedgerDetailSearchMapper.xml'], 'searchAppGeneralLedgerDetailMapper', 'searchAppGeneralLedgerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesSearchMapper.xml'], 'searchAppGroupAuthoritiesMapper', 'searchAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersSearchMapper.xml'], 'searchAppGroupMembersMapper', 'searchAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsSearchMapper.xml'], 'searchAppGroupsMapper', 'searchAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppInventoryOpenBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppInventoryOpenBalanceSearchMapper.xml'], 'searchAppInventoryOpenBalanceMapper', 'searchAppInventoryOpenBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppJobTitle(jsonObj, callback) {
            var query = createQuery(['./mapper/AppJobTitleSearchMapper.xml'], 'searchAppJobTitleMapper', 'searchAppJobTitle', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusSearchMapper.xml'], 'searchAppMenusMapper', 'searchAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageSearchMapper.xml'], 'searchAppMessageMapper', 'searchAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppMonthEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMonthEndPeriodSearchMapper.xml'], 'searchAppMonthEndPeriodMapper', 'searchAppMonthEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppOpeningBalanceSearchMapper.xml'], 'searchAppOpeningBalanceMapper', 'searchAppOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppPayGrade(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPayGradeSearchMapper.xml'], 'searchAppPayGradeMapper', 'searchAppPayGrade', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsSearchMapper.xml'], 'searchAppPersistentLoginsMapper', 'searchAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductSearchMapper.xml'], 'searchAppProductMapper', 'searchAppProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppProductAcctCode(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductAcctCodeSearchMapper.xml'], 'searchAppProductAcctCodeMapper', 'searchAppProductAcctCode', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppProductCategory(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductCategorySearchMapper.xml'], 'searchAppProductCategoryMapper', 'searchAppProductCategory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppProductImage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductImageSearchMapper.xml'], 'searchAppProductImageMapper', 'searchAppProductImage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppProductSellingPrice(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductSellingPriceSearchMapper.xml'], 'searchAppProductSellingPriceMapper', 'searchAppProductSellingPrice', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppProductStockInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductStockInfoSearchMapper.xml'], 'searchAppProductStockInfoMapper', 'searchAppProductStockInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppProject(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProjectSearchMapper.xml'], 'searchAppProjectMapper', 'searchAppProject', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRecurringBankCashRcv(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCashRcvSearchMapper.xml'], 'searchAppRecurringBankCashRcvMapper', 'searchAppRecurringBankCashRcv', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRecurringBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCrFaSearchMapper.xml'], 'searchAppRecurringBankCrFaMapper', 'searchAppRecurringBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRecurringBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWcFaSearchMapper.xml'], 'searchAppRecurringBankWcFaMapper', 'searchAppRecurringBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRecurringBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWriteCheckSearchMapper.xml'], 'searchAppRecurringBankWriteCheckMapper', 'searchAppRecurringBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRecurringJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalSearchMapper.xml'], 'searchAppRecurringJournalMapper', 'searchAppRecurringJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRecurringJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalItemsSearchMapper.xml'], 'searchAppRecurringJournalItemsMapper', 'searchAppRecurringJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRefCity(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCitySearchMapper.xml'], 'searchAppRefCityMapper', 'searchAppRefCity', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRefCountry(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCountrySearchMapper.xml'], 'searchAppRefCountryMapper', 'searchAppRefCountry', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRefProvince(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefProvinceSearchMapper.xml'], 'searchAppRefProvinceMapper', 'searchAppRefProvince', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRestoreInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRestoreInfoSearchMapper.xml'], 'searchAppRestoreInfoMapper', 'searchAppRestoreInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomSearchMapper.xml'], 'searchAppRoomMapper', 'searchAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRptBalanceSheet(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptBalanceSheetSearchMapper.xml'], 'searchAppRptBalanceSheetMapper', 'searchAppRptBalanceSheet', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRptCashFlow(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptCashFlowSearchMapper.xml'], 'searchAppRptCashFlowMapper', 'searchAppRptCashFlow', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRptProfitAndLoss(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptProfitAndLossSearchMapper.xml'], 'searchAppRptProfitAndLossMapper', 'searchAppRptProfitAndLoss', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRptTrialBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptTrialBalanceSearchMapper.xml'], 'searchAppRptTrialBalanceMapper', 'searchAppRptTrialBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppStockCard(jsonObj, callback) {
            var query = createQuery(['./mapper/AppStockCardSearchMapper.xml'], 'searchAppStockCardMapper', 'searchAppStockCard', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppSummaryApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApAgingSearchMapper.xml'], 'searchAppSummaryApAgingMapper', 'searchAppSummaryApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppSummaryApVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApVendorSearchMapper.xml'], 'searchAppSummaryApVendorMapper', 'searchAppSummaryApVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppSummaryArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArAgingSearchMapper.xml'], 'searchAppSummaryArAgingMapper', 'searchAppSummaryArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppSummaryArCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArCustomerSearchMapper.xml'], 'searchAppSummaryArCustomerMapper', 'searchAppSummaryArCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppSummaryGl(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryGlSearchMapper.xml'], 'searchAppSummaryGlMapper', 'searchAppSummaryGl', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppTax(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTaxSearchMapper.xml'], 'searchAppTaxMapper', 'searchAppTax', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfPaymentSearchMapper.xml'], 'searchAppTermOfPaymentMapper', 'searchAppTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfSalesSearchMapper.xml'], 'searchAppTermOfSalesMapper', 'searchAppTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersSearchMapper.xml'], 'searchAppUsersMapper', 'searchAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorSearchMapper.xml'], 'searchAppVendorMapper', 'searchAppVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppVendorTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorTermOfPaymentSearchMapper.xml'], 'searchAppVendorTermOfPaymentMapper', 'searchAppVendorTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppWorkStation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppWorkStationSearchMapper.xml'], 'searchAppWorkStationMapper', 'searchAppWorkStation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppYearEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppYearEndPeriodSearchMapper.xml'], 'searchAppYearEndPeriodMapper', 'searchAppYearEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppAccountClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountClassReadMapper.xml'], 'readAppAccountClassMapper', 'readAppAccountClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppAccountSubClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountSubClassReadMapper.xml'], 'readAppAccountSubClassMapper', 'readAppAccountSubClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppAdjustmentJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAdjustmentJournalReadMapper.xml'], 'readAppAdjustmentJournalMapper', 'readAppAdjustmentJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApAgingReadMapper.xml'], 'readAppApAgingMapper', 'readAppApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppApOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApOpeningBalanceReadMapper.xml'], 'readAppApOpeningBalanceMapper', 'readAppApOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppApVendorDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApVendorDetailReadMapper.xml'], 'readAppApVendorDetailMapper', 'readAppApVendorDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppApWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApWriteoffVerificationReadMapper.xml'], 'readAppApWriteoffVerificationMapper', 'readAppApWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArAgingReadMapper.xml'], 'readAppArAgingMapper', 'readAppArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppArCustomerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArCustomerDetailReadMapper.xml'], 'readAppArCustomerDetailMapper', 'readAppArCustomerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppArOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArOpeningBalanceReadMapper.xml'], 'readAppArOpeningBalanceMapper', 'readAppArOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppArWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArWriteoffVerificationReadMapper.xml'], 'readAppArWriteoffVerificationMapper', 'readAppArWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesReadMapper.xml'], 'readAppAuthoritiesMapper', 'readAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBackupInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBackupInfoReadMapper.xml'], 'readAppBackupInfoMapper', 'readAppBackupInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankCashReceive(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCashReceiveReadMapper.xml'], 'readAppBankCashReceiveMapper', 'readAppBankCashReceive', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCrFaReadMapper.xml'], 'readAppBankCrFaMapper', 'readAppBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankData(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankDataReadMapper.xml'], 'readAppBankDataMapper', 'readAppBankData', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankFundTransfer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankFundTransferReadMapper.xml'], 'readAppBankFundTransferMapper', 'readAppBankFundTransfer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankReconciliation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationReadMapper.xml'], 'readAppBankReconciliationMapper', 'readAppBankReconciliation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankReconciliationDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationDetailReadMapper.xml'], 'readAppBankReconciliationDetailMapper', 'readAppBankReconciliationDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWcFaReadMapper.xml'], 'readAppBankWcFaMapper', 'readAppBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWriteCheckReadMapper.xml'], 'readAppBankWriteCheckMapper', 'readAppBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppBudgetInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBudgetInfoReadMapper.xml'], 'readAppBudgetInfoMapper', 'readAppBudgetInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppChartOfAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppChartOfAccountReadMapper.xml'], 'readAppChartOfAccountMapper', 'readAppChartOfAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCompanyInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoReadMapper.xml'], 'readAppCompanyInfoMapper', 'readAppCompanyInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCompanyInfoAccPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoAccPeriodReadMapper.xml'], 'readAppCompanyInfoAccPeriodMapper', 'readAppCompanyInfoAccPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactReadMapper.xml'], 'readAppContactMapper', 'readAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppControlAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppControlAccountReadMapper.xml'], 'readAppControlAccountMapper', 'readAppControlAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCurrency(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyReadMapper.xml'], 'readAppCurrencyMapper', 'readAppCurrency', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCurrencyFluctuation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyFluctuationReadMapper.xml'], 'readAppCurrencyFluctuationMapper', 'readAppCurrencyFluctuation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCurrencyRevaluation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyRevaluationReadMapper.xml'], 'readAppCurrencyRevaluationMapper', 'readAppCurrencyRevaluation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerReadMapper.xml'], 'readAppCustomerMapper', 'readAppCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCustomerTermOfPay(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfPayReadMapper.xml'], 'readAppCustomerTermOfPayMapper', 'readAppCustomerTermOfPay', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppCustomerTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfSalesReadMapper.xml'], 'readAppCustomerTermOfSalesMapper', 'readAppCustomerTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppDepartment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppDepartmentReadMapper.xml'], 'readAppDepartmentMapper', 'readAppDepartment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppEmployee(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmployeeReadMapper.xml'], 'readAppEmployeeMapper', 'readAppEmployee', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppEmploymentStatus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmploymentStatusReadMapper.xml'], 'readAppEmploymentStatusMapper', 'readAppEmploymentStatus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGeneralJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalReadMapper.xml'], 'readAppGeneralJournalMapper', 'readAppGeneralJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGeneralJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalItemsReadMapper.xml'], 'readAppGeneralJournalItemsMapper', 'readAppGeneralJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGeneralLedgerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralLedgerDetailReadMapper.xml'], 'readAppGeneralLedgerDetailMapper', 'readAppGeneralLedgerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesReadMapper.xml'], 'readAppGroupAuthoritiesMapper', 'readAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersReadMapper.xml'], 'readAppGroupMembersMapper', 'readAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsReadMapper.xml'], 'readAppGroupsMapper', 'readAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppInventoryOpenBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppInventoryOpenBalanceReadMapper.xml'], 'readAppInventoryOpenBalanceMapper', 'readAppInventoryOpenBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppJobTitle(jsonObj, callback) {
            var query = createQuery(['./mapper/AppJobTitleReadMapper.xml'], 'readAppJobTitleMapper', 'readAppJobTitle', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusReadMapper.xml'], 'readAppMenusMapper', 'readAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageReadMapper.xml'], 'readAppMessageMapper', 'readAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppMonthEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMonthEndPeriodReadMapper.xml'], 'readAppMonthEndPeriodMapper', 'readAppMonthEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppOpeningBalanceReadMapper.xml'], 'readAppOpeningBalanceMapper', 'readAppOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppPayGrade(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPayGradeReadMapper.xml'], 'readAppPayGradeMapper', 'readAppPayGrade', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsReadMapper.xml'], 'readAppPersistentLoginsMapper', 'readAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductReadMapper.xml'], 'readAppProductMapper', 'readAppProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppProductAcctCode(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductAcctCodeReadMapper.xml'], 'readAppProductAcctCodeMapper', 'readAppProductAcctCode', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppProductCategory(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductCategoryReadMapper.xml'], 'readAppProductCategoryMapper', 'readAppProductCategory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppProductImage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductImageReadMapper.xml'], 'readAppProductImageMapper', 'readAppProductImage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppProductSellingPrice(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductSellingPriceReadMapper.xml'], 'readAppProductSellingPriceMapper', 'readAppProductSellingPrice', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppProductStockInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductStockInfoReadMapper.xml'], 'readAppProductStockInfoMapper', 'readAppProductStockInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppProject(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProjectReadMapper.xml'], 'readAppProjectMapper', 'readAppProject', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRecurringBankCashRcv(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCashRcvReadMapper.xml'], 'readAppRecurringBankCashRcvMapper', 'readAppRecurringBankCashRcv', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRecurringBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCrFaReadMapper.xml'], 'readAppRecurringBankCrFaMapper', 'readAppRecurringBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRecurringBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWcFaReadMapper.xml'], 'readAppRecurringBankWcFaMapper', 'readAppRecurringBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRecurringBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWriteCheckReadMapper.xml'], 'readAppRecurringBankWriteCheckMapper', 'readAppRecurringBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRecurringJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalReadMapper.xml'], 'readAppRecurringJournalMapper', 'readAppRecurringJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRecurringJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalItemsReadMapper.xml'], 'readAppRecurringJournalItemsMapper', 'readAppRecurringJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRefCity(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCityReadMapper.xml'], 'readAppRefCityMapper', 'readAppRefCity', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRefCountry(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCountryReadMapper.xml'], 'readAppRefCountryMapper', 'readAppRefCountry', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRefProvince(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefProvinceReadMapper.xml'], 'readAppRefProvinceMapper', 'readAppRefProvince', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRestoreInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRestoreInfoReadMapper.xml'], 'readAppRestoreInfoMapper', 'readAppRestoreInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomReadMapper.xml'], 'readAppRoomMapper', 'readAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRptBalanceSheet(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptBalanceSheetReadMapper.xml'], 'readAppRptBalanceSheetMapper', 'readAppRptBalanceSheet', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRptCashFlow(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptCashFlowReadMapper.xml'], 'readAppRptCashFlowMapper', 'readAppRptCashFlow', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRptProfitAndLoss(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptProfitAndLossReadMapper.xml'], 'readAppRptProfitAndLossMapper', 'readAppRptProfitAndLoss', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRptTrialBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptTrialBalanceReadMapper.xml'], 'readAppRptTrialBalanceMapper', 'readAppRptTrialBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppStockCard(jsonObj, callback) {
            var query = createQuery(['./mapper/AppStockCardReadMapper.xml'], 'readAppStockCardMapper', 'readAppStockCard', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppSummaryApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApAgingReadMapper.xml'], 'readAppSummaryApAgingMapper', 'readAppSummaryApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppSummaryApVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApVendorReadMapper.xml'], 'readAppSummaryApVendorMapper', 'readAppSummaryApVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppSummaryArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArAgingReadMapper.xml'], 'readAppSummaryArAgingMapper', 'readAppSummaryArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppSummaryArCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArCustomerReadMapper.xml'], 'readAppSummaryArCustomerMapper', 'readAppSummaryArCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppSummaryGl(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryGlReadMapper.xml'], 'readAppSummaryGlMapper', 'readAppSummaryGl', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppTax(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTaxReadMapper.xml'], 'readAppTaxMapper', 'readAppTax', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfPaymentReadMapper.xml'], 'readAppTermOfPaymentMapper', 'readAppTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfSalesReadMapper.xml'], 'readAppTermOfSalesMapper', 'readAppTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersReadMapper.xml'], 'readAppUsersMapper', 'readAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorReadMapper.xml'], 'readAppVendorMapper', 'readAppVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppVendorTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorTermOfPaymentReadMapper.xml'], 'readAppVendorTermOfPaymentMapper', 'readAppVendorTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppWorkStation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppWorkStationReadMapper.xml'], 'readAppWorkStationMapper', 'readAppWorkStation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppYearEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppYearEndPeriodReadMapper.xml'], 'readAppYearEndPeriodMapper', 'readAppYearEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppAccountClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountClassNewMapper.xml'], 'newAppAccountClassMapper', 'newAppAccountClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppAccountSubClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountSubClassNewMapper.xml'], 'newAppAccountSubClassMapper', 'newAppAccountSubClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppAdjustmentJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAdjustmentJournalNewMapper.xml'], 'newAppAdjustmentJournalMapper', 'newAppAdjustmentJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApAgingNewMapper.xml'], 'newAppApAgingMapper', 'newAppApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppApOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApOpeningBalanceNewMapper.xml'], 'newAppApOpeningBalanceMapper', 'newAppApOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppApVendorDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApVendorDetailNewMapper.xml'], 'newAppApVendorDetailMapper', 'newAppApVendorDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppApWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApWriteoffVerificationNewMapper.xml'], 'newAppApWriteoffVerificationMapper', 'newAppApWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArAgingNewMapper.xml'], 'newAppArAgingMapper', 'newAppArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppArCustomerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArCustomerDetailNewMapper.xml'], 'newAppArCustomerDetailMapper', 'newAppArCustomerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppArOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArOpeningBalanceNewMapper.xml'], 'newAppArOpeningBalanceMapper', 'newAppArOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppArWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArWriteoffVerificationNewMapper.xml'], 'newAppArWriteoffVerificationMapper', 'newAppArWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesNewMapper.xml'], 'newAppAuthoritiesMapper', 'newAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBackupInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBackupInfoNewMapper.xml'], 'newAppBackupInfoMapper', 'newAppBackupInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankCashReceive(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCashReceiveNewMapper.xml'], 'newAppBankCashReceiveMapper', 'newAppBankCashReceive', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCrFaNewMapper.xml'], 'newAppBankCrFaMapper', 'newAppBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankData(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankDataNewMapper.xml'], 'newAppBankDataMapper', 'newAppBankData', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankFundTransfer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankFundTransferNewMapper.xml'], 'newAppBankFundTransferMapper', 'newAppBankFundTransfer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankReconciliation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationNewMapper.xml'], 'newAppBankReconciliationMapper', 'newAppBankReconciliation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankReconciliationDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationDetailNewMapper.xml'], 'newAppBankReconciliationDetailMapper', 'newAppBankReconciliationDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWcFaNewMapper.xml'], 'newAppBankWcFaMapper', 'newAppBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWriteCheckNewMapper.xml'], 'newAppBankWriteCheckMapper', 'newAppBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppBudgetInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBudgetInfoNewMapper.xml'], 'newAppBudgetInfoMapper', 'newAppBudgetInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppChartOfAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppChartOfAccountNewMapper.xml'], 'newAppChartOfAccountMapper', 'newAppChartOfAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCompanyInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoNewMapper.xml'], 'newAppCompanyInfoMapper', 'newAppCompanyInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCompanyInfoAccPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoAccPeriodNewMapper.xml'], 'newAppCompanyInfoAccPeriodMapper', 'newAppCompanyInfoAccPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactNewMapper.xml'], 'newAppContactMapper', 'newAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppControlAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppControlAccountNewMapper.xml'], 'newAppControlAccountMapper', 'newAppControlAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCurrency(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyNewMapper.xml'], 'newAppCurrencyMapper', 'newAppCurrency', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCurrencyFluctuation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyFluctuationNewMapper.xml'], 'newAppCurrencyFluctuationMapper', 'newAppCurrencyFluctuation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCurrencyRevaluation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyRevaluationNewMapper.xml'], 'newAppCurrencyRevaluationMapper', 'newAppCurrencyRevaluation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerNewMapper.xml'], 'newAppCustomerMapper', 'newAppCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCustomerTermOfPay(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfPayNewMapper.xml'], 'newAppCustomerTermOfPayMapper', 'newAppCustomerTermOfPay', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppCustomerTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfSalesNewMapper.xml'], 'newAppCustomerTermOfSalesMapper', 'newAppCustomerTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppDepartment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppDepartmentNewMapper.xml'], 'newAppDepartmentMapper', 'newAppDepartment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppEmployee(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmployeeNewMapper.xml'], 'newAppEmployeeMapper', 'newAppEmployee', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppEmploymentStatus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmploymentStatusNewMapper.xml'], 'newAppEmploymentStatusMapper', 'newAppEmploymentStatus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGeneralJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalNewMapper.xml'], 'newAppGeneralJournalMapper', 'newAppGeneralJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGeneralJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalItemsNewMapper.xml'], 'newAppGeneralJournalItemsMapper', 'newAppGeneralJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGeneralLedgerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralLedgerDetailNewMapper.xml'], 'newAppGeneralLedgerDetailMapper', 'newAppGeneralLedgerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesNewMapper.xml'], 'newAppGroupAuthoritiesMapper', 'newAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersNewMapper.xml'], 'newAppGroupMembersMapper', 'newAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsNewMapper.xml'], 'newAppGroupsMapper', 'newAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppInventoryOpenBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppInventoryOpenBalanceNewMapper.xml'], 'newAppInventoryOpenBalanceMapper', 'newAppInventoryOpenBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppJobTitle(jsonObj, callback) {
            var query = createQuery(['./mapper/AppJobTitleNewMapper.xml'], 'newAppJobTitleMapper', 'newAppJobTitle', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusNewMapper.xml'], 'newAppMenusMapper', 'newAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageNewMapper.xml'], 'newAppMessageMapper', 'newAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppMonthEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMonthEndPeriodNewMapper.xml'], 'newAppMonthEndPeriodMapper', 'newAppMonthEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppOpeningBalanceNewMapper.xml'], 'newAppOpeningBalanceMapper', 'newAppOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppPayGrade(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPayGradeNewMapper.xml'], 'newAppPayGradeMapper', 'newAppPayGrade', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsNewMapper.xml'], 'newAppPersistentLoginsMapper', 'newAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductNewMapper.xml'], 'newAppProductMapper', 'newAppProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppProductAcctCode(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductAcctCodeNewMapper.xml'], 'newAppProductAcctCodeMapper', 'newAppProductAcctCode', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppProductCategory(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductCategoryNewMapper.xml'], 'newAppProductCategoryMapper', 'newAppProductCategory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppProductImage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductImageNewMapper.xml'], 'newAppProductImageMapper', 'newAppProductImage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppProductSellingPrice(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductSellingPriceNewMapper.xml'], 'newAppProductSellingPriceMapper', 'newAppProductSellingPrice', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppProductStockInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductStockInfoNewMapper.xml'], 'newAppProductStockInfoMapper', 'newAppProductStockInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppProject(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProjectNewMapper.xml'], 'newAppProjectMapper', 'newAppProject', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRecurringBankCashRcv(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCashRcvNewMapper.xml'], 'newAppRecurringBankCashRcvMapper', 'newAppRecurringBankCashRcv', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRecurringBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCrFaNewMapper.xml'], 'newAppRecurringBankCrFaMapper', 'newAppRecurringBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRecurringBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWcFaNewMapper.xml'], 'newAppRecurringBankWcFaMapper', 'newAppRecurringBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRecurringBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWriteCheckNewMapper.xml'], 'newAppRecurringBankWriteCheckMapper', 'newAppRecurringBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRecurringJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalNewMapper.xml'], 'newAppRecurringJournalMapper', 'newAppRecurringJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRecurringJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalItemsNewMapper.xml'], 'newAppRecurringJournalItemsMapper', 'newAppRecurringJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRefCity(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCityNewMapper.xml'], 'newAppRefCityMapper', 'newAppRefCity', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRefCountry(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCountryNewMapper.xml'], 'newAppRefCountryMapper', 'newAppRefCountry', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRefProvince(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefProvinceNewMapper.xml'], 'newAppRefProvinceMapper', 'newAppRefProvince', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRestoreInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRestoreInfoNewMapper.xml'], 'newAppRestoreInfoMapper', 'newAppRestoreInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomNewMapper.xml'], 'newAppRoomMapper', 'newAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRptBalanceSheet(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptBalanceSheetNewMapper.xml'], 'newAppRptBalanceSheetMapper', 'newAppRptBalanceSheet', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRptCashFlow(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptCashFlowNewMapper.xml'], 'newAppRptCashFlowMapper', 'newAppRptCashFlow', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRptProfitAndLoss(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptProfitAndLossNewMapper.xml'], 'newAppRptProfitAndLossMapper', 'newAppRptProfitAndLoss', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRptTrialBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptTrialBalanceNewMapper.xml'], 'newAppRptTrialBalanceMapper', 'newAppRptTrialBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppStockCard(jsonObj, callback) {
            var query = createQuery(['./mapper/AppStockCardNewMapper.xml'], 'newAppStockCardMapper', 'newAppStockCard', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppSummaryApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApAgingNewMapper.xml'], 'newAppSummaryApAgingMapper', 'newAppSummaryApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppSummaryApVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApVendorNewMapper.xml'], 'newAppSummaryApVendorMapper', 'newAppSummaryApVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppSummaryArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArAgingNewMapper.xml'], 'newAppSummaryArAgingMapper', 'newAppSummaryArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppSummaryArCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArCustomerNewMapper.xml'], 'newAppSummaryArCustomerMapper', 'newAppSummaryArCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppSummaryGl(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryGlNewMapper.xml'], 'newAppSummaryGlMapper', 'newAppSummaryGl', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppTax(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTaxNewMapper.xml'], 'newAppTaxMapper', 'newAppTax', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfPaymentNewMapper.xml'], 'newAppTermOfPaymentMapper', 'newAppTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfSalesNewMapper.xml'], 'newAppTermOfSalesMapper', 'newAppTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersNewMapper.xml'], 'newAppUsersMapper', 'newAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorNewMapper.xml'], 'newAppVendorMapper', 'newAppVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppVendorTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorTermOfPaymentNewMapper.xml'], 'newAppVendorTermOfPaymentMapper', 'newAppVendorTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppWorkStation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppWorkStationNewMapper.xml'], 'newAppWorkStationMapper', 'newAppWorkStation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppYearEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppYearEndPeriodNewMapper.xml'], 'newAppYearEndPeriodMapper', 'newAppYearEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppAccountClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountClassWriteMapper.xml'], 'writeAppAccountClassMapper', 'writeAppAccountClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppAccountSubClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountSubClassWriteMapper.xml'], 'writeAppAccountSubClassMapper', 'writeAppAccountSubClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppAdjustmentJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAdjustmentJournalWriteMapper.xml'], 'writeAppAdjustmentJournalMapper', 'writeAppAdjustmentJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApAgingWriteMapper.xml'], 'writeAppApAgingMapper', 'writeAppApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppApOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApOpeningBalanceWriteMapper.xml'], 'writeAppApOpeningBalanceMapper', 'writeAppApOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppApVendorDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApVendorDetailWriteMapper.xml'], 'writeAppApVendorDetailMapper', 'writeAppApVendorDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppApWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApWriteoffVerificationWriteMapper.xml'], 'writeAppApWriteoffVerificationMapper', 'writeAppApWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArAgingWriteMapper.xml'], 'writeAppArAgingMapper', 'writeAppArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppArCustomerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArCustomerDetailWriteMapper.xml'], 'writeAppArCustomerDetailMapper', 'writeAppArCustomerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppArOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArOpeningBalanceWriteMapper.xml'], 'writeAppArOpeningBalanceMapper', 'writeAppArOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppArWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArWriteoffVerificationWriteMapper.xml'], 'writeAppArWriteoffVerificationMapper', 'writeAppArWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesWriteMapper.xml'], 'writeAppAuthoritiesMapper', 'writeAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBackupInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBackupInfoWriteMapper.xml'], 'writeAppBackupInfoMapper', 'writeAppBackupInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankCashReceive(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCashReceiveWriteMapper.xml'], 'writeAppBankCashReceiveMapper', 'writeAppBankCashReceive', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCrFaWriteMapper.xml'], 'writeAppBankCrFaMapper', 'writeAppBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankData(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankDataWriteMapper.xml'], 'writeAppBankDataMapper', 'writeAppBankData', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankFundTransfer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankFundTransferWriteMapper.xml'], 'writeAppBankFundTransferMapper', 'writeAppBankFundTransfer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankReconciliation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationWriteMapper.xml'], 'writeAppBankReconciliationMapper', 'writeAppBankReconciliation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankReconciliationDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationDetailWriteMapper.xml'], 'writeAppBankReconciliationDetailMapper', 'writeAppBankReconciliationDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWcFaWriteMapper.xml'], 'writeAppBankWcFaMapper', 'writeAppBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWriteCheckWriteMapper.xml'], 'writeAppBankWriteCheckMapper', 'writeAppBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppBudgetInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBudgetInfoWriteMapper.xml'], 'writeAppBudgetInfoMapper', 'writeAppBudgetInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppChartOfAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppChartOfAccountWriteMapper.xml'], 'writeAppChartOfAccountMapper', 'writeAppChartOfAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCompanyInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoWriteMapper.xml'], 'writeAppCompanyInfoMapper', 'writeAppCompanyInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCompanyInfoAccPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoAccPeriodWriteMapper.xml'], 'writeAppCompanyInfoAccPeriodMapper', 'writeAppCompanyInfoAccPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactWriteMapper.xml'], 'writeAppContactMapper', 'writeAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppControlAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppControlAccountWriteMapper.xml'], 'writeAppControlAccountMapper', 'writeAppControlAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCurrency(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyWriteMapper.xml'], 'writeAppCurrencyMapper', 'writeAppCurrency', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCurrencyFluctuation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyFluctuationWriteMapper.xml'], 'writeAppCurrencyFluctuationMapper', 'writeAppCurrencyFluctuation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCurrencyRevaluation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyRevaluationWriteMapper.xml'], 'writeAppCurrencyRevaluationMapper', 'writeAppCurrencyRevaluation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerWriteMapper.xml'], 'writeAppCustomerMapper', 'writeAppCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCustomerTermOfPay(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfPayWriteMapper.xml'], 'writeAppCustomerTermOfPayMapper', 'writeAppCustomerTermOfPay', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppCustomerTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfSalesWriteMapper.xml'], 'writeAppCustomerTermOfSalesMapper', 'writeAppCustomerTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppDepartment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppDepartmentWriteMapper.xml'], 'writeAppDepartmentMapper', 'writeAppDepartment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppEmployee(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmployeeWriteMapper.xml'], 'writeAppEmployeeMapper', 'writeAppEmployee', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppEmploymentStatus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmploymentStatusWriteMapper.xml'], 'writeAppEmploymentStatusMapper', 'writeAppEmploymentStatus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGeneralJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalWriteMapper.xml'], 'writeAppGeneralJournalMapper', 'writeAppGeneralJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGeneralJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalItemsWriteMapper.xml'], 'writeAppGeneralJournalItemsMapper', 'writeAppGeneralJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGeneralLedgerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralLedgerDetailWriteMapper.xml'], 'writeAppGeneralLedgerDetailMapper', 'writeAppGeneralLedgerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesWriteMapper.xml'], 'writeAppGroupAuthoritiesMapper', 'writeAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersWriteMapper.xml'], 'writeAppGroupMembersMapper', 'writeAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsWriteMapper.xml'], 'writeAppGroupsMapper', 'writeAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppInventoryOpenBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppInventoryOpenBalanceWriteMapper.xml'], 'writeAppInventoryOpenBalanceMapper', 'writeAppInventoryOpenBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppJobTitle(jsonObj, callback) {
            var query = createQuery(['./mapper/AppJobTitleWriteMapper.xml'], 'writeAppJobTitleMapper', 'writeAppJobTitle', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusWriteMapper.xml'], 'writeAppMenusMapper', 'writeAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageWriteMapper.xml'], 'writeAppMessageMapper', 'writeAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppMonthEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMonthEndPeriodWriteMapper.xml'], 'writeAppMonthEndPeriodMapper', 'writeAppMonthEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppOpeningBalanceWriteMapper.xml'], 'writeAppOpeningBalanceMapper', 'writeAppOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppPayGrade(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPayGradeWriteMapper.xml'], 'writeAppPayGradeMapper', 'writeAppPayGrade', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsWriteMapper.xml'], 'writeAppPersistentLoginsMapper', 'writeAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductWriteMapper.xml'], 'writeAppProductMapper', 'writeAppProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppProductAcctCode(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductAcctCodeWriteMapper.xml'], 'writeAppProductAcctCodeMapper', 'writeAppProductAcctCode', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppProductCategory(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductCategoryWriteMapper.xml'], 'writeAppProductCategoryMapper', 'writeAppProductCategory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppProductImage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductImageWriteMapper.xml'], 'writeAppProductImageMapper', 'writeAppProductImage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppProductSellingPrice(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductSellingPriceWriteMapper.xml'], 'writeAppProductSellingPriceMapper', 'writeAppProductSellingPrice', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppProductStockInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductStockInfoWriteMapper.xml'], 'writeAppProductStockInfoMapper', 'writeAppProductStockInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppProject(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProjectWriteMapper.xml'], 'writeAppProjectMapper', 'writeAppProject', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRecurringBankCashRcv(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCashRcvWriteMapper.xml'], 'writeAppRecurringBankCashRcvMapper', 'writeAppRecurringBankCashRcv', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRecurringBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCrFaWriteMapper.xml'], 'writeAppRecurringBankCrFaMapper', 'writeAppRecurringBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRecurringBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWcFaWriteMapper.xml'], 'writeAppRecurringBankWcFaMapper', 'writeAppRecurringBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRecurringBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWriteCheckWriteMapper.xml'], 'writeAppRecurringBankWriteCheckMapper', 'writeAppRecurringBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRecurringJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalWriteMapper.xml'], 'writeAppRecurringJournalMapper', 'writeAppRecurringJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRecurringJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalItemsWriteMapper.xml'], 'writeAppRecurringJournalItemsMapper', 'writeAppRecurringJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRefCity(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCityWriteMapper.xml'], 'writeAppRefCityMapper', 'writeAppRefCity', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRefCountry(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCountryWriteMapper.xml'], 'writeAppRefCountryMapper', 'writeAppRefCountry', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRefProvince(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefProvinceWriteMapper.xml'], 'writeAppRefProvinceMapper', 'writeAppRefProvince', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRestoreInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRestoreInfoWriteMapper.xml'], 'writeAppRestoreInfoMapper', 'writeAppRestoreInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomWriteMapper.xml'], 'writeAppRoomMapper', 'writeAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRptBalanceSheet(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptBalanceSheetWriteMapper.xml'], 'writeAppRptBalanceSheetMapper', 'writeAppRptBalanceSheet', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRptCashFlow(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptCashFlowWriteMapper.xml'], 'writeAppRptCashFlowMapper', 'writeAppRptCashFlow', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRptProfitAndLoss(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptProfitAndLossWriteMapper.xml'], 'writeAppRptProfitAndLossMapper', 'writeAppRptProfitAndLoss', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRptTrialBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptTrialBalanceWriteMapper.xml'], 'writeAppRptTrialBalanceMapper', 'writeAppRptTrialBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppStockCard(jsonObj, callback) {
            var query = createQuery(['./mapper/AppStockCardWriteMapper.xml'], 'writeAppStockCardMapper', 'writeAppStockCard', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppSummaryApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApAgingWriteMapper.xml'], 'writeAppSummaryApAgingMapper', 'writeAppSummaryApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppSummaryApVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApVendorWriteMapper.xml'], 'writeAppSummaryApVendorMapper', 'writeAppSummaryApVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppSummaryArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArAgingWriteMapper.xml'], 'writeAppSummaryArAgingMapper', 'writeAppSummaryArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppSummaryArCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArCustomerWriteMapper.xml'], 'writeAppSummaryArCustomerMapper', 'writeAppSummaryArCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppSummaryGl(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryGlWriteMapper.xml'], 'writeAppSummaryGlMapper', 'writeAppSummaryGl', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppTax(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTaxWriteMapper.xml'], 'writeAppTaxMapper', 'writeAppTax', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfPaymentWriteMapper.xml'], 'writeAppTermOfPaymentMapper', 'writeAppTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfSalesWriteMapper.xml'], 'writeAppTermOfSalesMapper', 'writeAppTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersWriteMapper.xml'], 'writeAppUsersMapper', 'writeAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorWriteMapper.xml'], 'writeAppVendorMapper', 'writeAppVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppVendorTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorTermOfPaymentWriteMapper.xml'], 'writeAppVendorTermOfPaymentMapper', 'writeAppVendorTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppWorkStation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppWorkStationWriteMapper.xml'], 'writeAppWorkStationMapper', 'writeAppWorkStation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppYearEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppYearEndPeriodWriteMapper.xml'], 'writeAppYearEndPeriodMapper', 'writeAppYearEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppAccountClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountClassDeleteMapper.xml'], 'deleteAppAccountClassMapper', 'deleteAppAccountClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppAccountSubClass(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAccountSubClassDeleteMapper.xml'], 'deleteAppAccountSubClassMapper', 'deleteAppAccountSubClass', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppAdjustmentJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAdjustmentJournalDeleteMapper.xml'], 'deleteAppAdjustmentJournalMapper', 'deleteAppAdjustmentJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApAgingDeleteMapper.xml'], 'deleteAppApAgingMapper', 'deleteAppApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppApOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApOpeningBalanceDeleteMapper.xml'], 'deleteAppApOpeningBalanceMapper', 'deleteAppApOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppApVendorDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApVendorDetailDeleteMapper.xml'], 'deleteAppApVendorDetailMapper', 'deleteAppApVendorDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppApWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppApWriteoffVerificationDeleteMapper.xml'], 'deleteAppApWriteoffVerificationMapper', 'deleteAppApWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArAgingDeleteMapper.xml'], 'deleteAppArAgingMapper', 'deleteAppArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppArCustomerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArCustomerDetailDeleteMapper.xml'], 'deleteAppArCustomerDetailMapper', 'deleteAppArCustomerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppArOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArOpeningBalanceDeleteMapper.xml'], 'deleteAppArOpeningBalanceMapper', 'deleteAppArOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppArWriteoffVerification(jsonObj, callback) {
            var query = createQuery(['./mapper/AppArWriteoffVerificationDeleteMapper.xml'], 'deleteAppArWriteoffVerificationMapper', 'deleteAppArWriteoffVerification', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesDeleteMapper.xml'], 'deleteAppAuthoritiesMapper', 'deleteAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBackupInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBackupInfoDeleteMapper.xml'], 'deleteAppBackupInfoMapper', 'deleteAppBackupInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankCashReceive(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCashReceiveDeleteMapper.xml'], 'deleteAppBankCashReceiveMapper', 'deleteAppBankCashReceive', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankCrFaDeleteMapper.xml'], 'deleteAppBankCrFaMapper', 'deleteAppBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankData(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankDataDeleteMapper.xml'], 'deleteAppBankDataMapper', 'deleteAppBankData', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankFundTransfer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankFundTransferDeleteMapper.xml'], 'deleteAppBankFundTransferMapper', 'deleteAppBankFundTransfer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankReconciliation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationDeleteMapper.xml'], 'deleteAppBankReconciliationMapper', 'deleteAppBankReconciliation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankReconciliationDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankReconciliationDetailDeleteMapper.xml'], 'deleteAppBankReconciliationDetailMapper', 'deleteAppBankReconciliationDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWcFaDeleteMapper.xml'], 'deleteAppBankWcFaMapper', 'deleteAppBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBankWriteCheckDeleteMapper.xml'], 'deleteAppBankWriteCheckMapper', 'deleteAppBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppBudgetInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppBudgetInfoDeleteMapper.xml'], 'deleteAppBudgetInfoMapper', 'deleteAppBudgetInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppChartOfAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppChartOfAccountDeleteMapper.xml'], 'deleteAppChartOfAccountMapper', 'deleteAppChartOfAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCompanyInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoDeleteMapper.xml'], 'deleteAppCompanyInfoMapper', 'deleteAppCompanyInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCompanyInfoAccPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCompanyInfoAccPeriodDeleteMapper.xml'], 'deleteAppCompanyInfoAccPeriodMapper', 'deleteAppCompanyInfoAccPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactDeleteMapper.xml'], 'deleteAppContactMapper', 'deleteAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppControlAccount(jsonObj, callback) {
            var query = createQuery(['./mapper/AppControlAccountDeleteMapper.xml'], 'deleteAppControlAccountMapper', 'deleteAppControlAccount', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCurrency(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyDeleteMapper.xml'], 'deleteAppCurrencyMapper', 'deleteAppCurrency', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCurrencyFluctuation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyFluctuationDeleteMapper.xml'], 'deleteAppCurrencyFluctuationMapper', 'deleteAppCurrencyFluctuation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCurrencyRevaluation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCurrencyRevaluationDeleteMapper.xml'], 'deleteAppCurrencyRevaluationMapper', 'deleteAppCurrencyRevaluation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerDeleteMapper.xml'], 'deleteAppCustomerMapper', 'deleteAppCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCustomerTermOfPay(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfPayDeleteMapper.xml'], 'deleteAppCustomerTermOfPayMapper', 'deleteAppCustomerTermOfPay', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppCustomerTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppCustomerTermOfSalesDeleteMapper.xml'], 'deleteAppCustomerTermOfSalesMapper', 'deleteAppCustomerTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppDepartment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppDepartmentDeleteMapper.xml'], 'deleteAppDepartmentMapper', 'deleteAppDepartment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppEmployee(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmployeeDeleteMapper.xml'], 'deleteAppEmployeeMapper', 'deleteAppEmployee', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppEmploymentStatus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppEmploymentStatusDeleteMapper.xml'], 'deleteAppEmploymentStatusMapper', 'deleteAppEmploymentStatus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGeneralJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalDeleteMapper.xml'], 'deleteAppGeneralJournalMapper', 'deleteAppGeneralJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGeneralJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralJournalItemsDeleteMapper.xml'], 'deleteAppGeneralJournalItemsMapper', 'deleteAppGeneralJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGeneralLedgerDetail(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGeneralLedgerDetailDeleteMapper.xml'], 'deleteAppGeneralLedgerDetailMapper', 'deleteAppGeneralLedgerDetail', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesDeleteMapper.xml'], 'deleteAppGroupAuthoritiesMapper', 'deleteAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersDeleteMapper.xml'], 'deleteAppGroupMembersMapper', 'deleteAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsDeleteMapper.xml'], 'deleteAppGroupsMapper', 'deleteAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppInventoryOpenBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppInventoryOpenBalanceDeleteMapper.xml'], 'deleteAppInventoryOpenBalanceMapper', 'deleteAppInventoryOpenBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppJobTitle(jsonObj, callback) {
            var query = createQuery(['./mapper/AppJobTitleDeleteMapper.xml'], 'deleteAppJobTitleMapper', 'deleteAppJobTitle', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusDeleteMapper.xml'], 'deleteAppMenusMapper', 'deleteAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageDeleteMapper.xml'], 'deleteAppMessageMapper', 'deleteAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppMonthEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMonthEndPeriodDeleteMapper.xml'], 'deleteAppMonthEndPeriodMapper', 'deleteAppMonthEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppOpeningBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppOpeningBalanceDeleteMapper.xml'], 'deleteAppOpeningBalanceMapper', 'deleteAppOpeningBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppPayGrade(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPayGradeDeleteMapper.xml'], 'deleteAppPayGradeMapper', 'deleteAppPayGrade', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsDeleteMapper.xml'], 'deleteAppPersistentLoginsMapper', 'deleteAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppProduct(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductDeleteMapper.xml'], 'deleteAppProductMapper', 'deleteAppProduct', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppProductAcctCode(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductAcctCodeDeleteMapper.xml'], 'deleteAppProductAcctCodeMapper', 'deleteAppProductAcctCode', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppProductCategory(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductCategoryDeleteMapper.xml'], 'deleteAppProductCategoryMapper', 'deleteAppProductCategory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppProductImage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductImageDeleteMapper.xml'], 'deleteAppProductImageMapper', 'deleteAppProductImage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppProductSellingPrice(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductSellingPriceDeleteMapper.xml'], 'deleteAppProductSellingPriceMapper', 'deleteAppProductSellingPrice', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppProductStockInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProductStockInfoDeleteMapper.xml'], 'deleteAppProductStockInfoMapper', 'deleteAppProductStockInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppProject(jsonObj, callback) {
            var query = createQuery(['./mapper/AppProjectDeleteMapper.xml'], 'deleteAppProjectMapper', 'deleteAppProject', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRecurringBankCashRcv(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCashRcvDeleteMapper.xml'], 'deleteAppRecurringBankCashRcvMapper', 'deleteAppRecurringBankCashRcv', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRecurringBankCrFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankCrFaDeleteMapper.xml'], 'deleteAppRecurringBankCrFaMapper', 'deleteAppRecurringBankCrFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRecurringBankWcFa(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWcFaDeleteMapper.xml'], 'deleteAppRecurringBankWcFaMapper', 'deleteAppRecurringBankWcFa', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRecurringBankWriteCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringBankWriteCheckDeleteMapper.xml'], 'deleteAppRecurringBankWriteCheckMapper', 'deleteAppRecurringBankWriteCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRecurringJournal(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalDeleteMapper.xml'], 'deleteAppRecurringJournalMapper', 'deleteAppRecurringJournal', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRecurringJournalItems(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRecurringJournalItemsDeleteMapper.xml'], 'deleteAppRecurringJournalItemsMapper', 'deleteAppRecurringJournalItems', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRefCity(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCityDeleteMapper.xml'], 'deleteAppRefCityMapper', 'deleteAppRefCity', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRefCountry(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefCountryDeleteMapper.xml'], 'deleteAppRefCountryMapper', 'deleteAppRefCountry', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRefProvince(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRefProvinceDeleteMapper.xml'], 'deleteAppRefProvinceMapper', 'deleteAppRefProvince', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRestoreInfo(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRestoreInfoDeleteMapper.xml'], 'deleteAppRestoreInfoMapper', 'deleteAppRestoreInfo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomDeleteMapper.xml'], 'deleteAppRoomMapper', 'deleteAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRptBalanceSheet(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptBalanceSheetDeleteMapper.xml'], 'deleteAppRptBalanceSheetMapper', 'deleteAppRptBalanceSheet', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRptCashFlow(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptCashFlowDeleteMapper.xml'], 'deleteAppRptCashFlowMapper', 'deleteAppRptCashFlow', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRptProfitAndLoss(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptProfitAndLossDeleteMapper.xml'], 'deleteAppRptProfitAndLossMapper', 'deleteAppRptProfitAndLoss', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRptTrialBalance(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRptTrialBalanceDeleteMapper.xml'], 'deleteAppRptTrialBalanceMapper', 'deleteAppRptTrialBalance', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppStockCard(jsonObj, callback) {
            var query = createQuery(['./mapper/AppStockCardDeleteMapper.xml'], 'deleteAppStockCardMapper', 'deleteAppStockCard', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppSummaryApAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApAgingDeleteMapper.xml'], 'deleteAppSummaryApAgingMapper', 'deleteAppSummaryApAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppSummaryApVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryApVendorDeleteMapper.xml'], 'deleteAppSummaryApVendorMapper', 'deleteAppSummaryApVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppSummaryArAging(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArAgingDeleteMapper.xml'], 'deleteAppSummaryArAgingMapper', 'deleteAppSummaryArAging', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppSummaryArCustomer(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryArCustomerDeleteMapper.xml'], 'deleteAppSummaryArCustomerMapper', 'deleteAppSummaryArCustomer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppSummaryGl(jsonObj, callback) {
            var query = createQuery(['./mapper/AppSummaryGlDeleteMapper.xml'], 'deleteAppSummaryGlMapper', 'deleteAppSummaryGl', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppTax(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTaxDeleteMapper.xml'], 'deleteAppTaxMapper', 'deleteAppTax', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfPaymentDeleteMapper.xml'], 'deleteAppTermOfPaymentMapper', 'deleteAppTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppTermOfSales(jsonObj, callback) {
            var query = createQuery(['./mapper/AppTermOfSalesDeleteMapper.xml'], 'deleteAppTermOfSalesMapper', 'deleteAppTermOfSales', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersDeleteMapper.xml'], 'deleteAppUsersMapper', 'deleteAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppVendor(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorDeleteMapper.xml'], 'deleteAppVendorMapper', 'deleteAppVendor', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppVendorTermOfPayment(jsonObj, callback) {
            var query = createQuery(['./mapper/AppVendorTermOfPaymentDeleteMapper.xml'], 'deleteAppVendorTermOfPaymentMapper', 'deleteAppVendorTermOfPayment', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppWorkStation(jsonObj, callback) {
            var query = createQuery(['./mapper/AppWorkStationDeleteMapper.xml'], 'deleteAppWorkStationMapper', 'deleteAppWorkStation', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppYearEndPeriod(jsonObj, callback) {
            var query = createQuery(['./mapper/AppYearEndPeriodDeleteMapper.xml'], 'deleteAppYearEndPeriodMapper', 'deleteAppYearEndPeriod', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        
    }
}
