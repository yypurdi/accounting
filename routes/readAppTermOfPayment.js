/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppTermOfPaymentRead',
    Heading:'AppTermOfPayment',
    TermOfPaymentId:{label :'TermOfPaymentId'},
    TopCode:{label :'TopCode'},
    TopDesc:{label :'TopDesc'},
    DiscountDaysIndays:{label :'DiscountDaysIndays'},
    DueDateIndays:{label :'DueDateIndays'},
    EarlyDiscountInpercentage:{label :'EarlyDiscountInpercentage'},
    LateChargesInpercentage:{label :'LateChargesInpercentage'},
    AppApOpeningBalance:{Heading:'AppApOpeningBalance',
        ApOpeningBalanceId:{header:'ApOpeningBalanceId'},
        VendorId:{header:'VendorId'},
        Date:{header:'Date'},
        InvoiceNo:{header:'InvoiceNo'},
        PurchaseOrderNo:{header:'PurchaseOrderNo'},
        CurrencyId:{header:'CurrencyId'},
        PayableValue:{header:'PayableValue'},
        TermOfPaymentId:{header:'TermOfPaymentId'},
        },
    AppArOpeningBalance:{Heading:'AppArOpeningBalance',
        ArOpeningBalanceId:{header:'ArOpeningBalanceId'},
        CustomerId:{header:'CustomerId'},
        Date:{header:'Date'},
        InvoiceNo:{header:'InvoiceNo'},
        PurchaseOrderNo:{header:'PurchaseOrderNo'},
        CurrencyId:{header:'CurrencyId'},
        ReceivableValue:{header:'ReceivableValue'},
        TermOfPaymentId:{header:'TermOfPaymentId'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppTermOfPayment?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppTermOfPayment = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppTermOfPayment(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppTermOfPayment');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appApOpeningBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppApOpeningBalance(jsonObj,function(err,rows) {
                jsonObj.appApOpeningBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appArOpeningBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppArOpeningBalance(jsonObj,function(err,rows) {
                jsonObj.appArOpeningBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppTermOfPaymentReadPage',parameter);
    }    
    Promise.all([readAppTermOfPayment,appApOpeningBalance,appArOpeningBalance]).then(sendResult);
});

module.exports = router;
