/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppRefProvinceRead',
    Heading:'AppRefProvince',
    ProvinceId:{label :'ProvinceId'},
    Name:{label :'Name'},
    Details:{label :'Details'},
    CountryId:{label :'CountryId'},
    AppCompanyInfo:{Heading:'AppCompanyInfo',
        CompanyInfoId:{header:'CompanyInfoId'},
        CompanyName:{header:'CompanyName'},
        AddressLine1:{header:'AddressLine1'},
        AddressLine2:{header:'AddressLine2'},
        CityId:{header:'CityId'},
        ProvinceId:{header:'ProvinceId'},
        CountryId:{header:'CountryId'},
        PostalCode:{header:'PostalCode'},
        },
    AppCustomer:{Heading:'AppCustomer',
        CustomerId:{header:'CustomerId'},
        CustNo:{header:'CustNo'},
        CustName:{header:'CustName'},
        CustType:{header:'CustType'},
        CustClassification:{header:'CustClassification'},
        CustCategory:{header:'CustCategory'},
        ContactPerson:{header:'ContactPerson'},
        ContactPosition:{header:'ContactPosition'},
        ContactPersonMobilePhone:{header:'ContactPersonMobilePhone'},
        ContactPersonEmail:{header:'ContactPersonEmail'},
        CustTaxId:{header:'CustTaxId'},
        CustCreditLimit:{header:'CustCreditLimit'},
        CustPhone1:{header:'CustPhone1'},
        CustPhone2:{header:'CustPhone2'},
        CustFax:{header:'CustFax'},
        CustEmailCompany:{header:'CustEmailCompany'},
        CustWebsite:{header:'CustWebsite'},
        CustCurrency:{header:'CustCurrency'},
        CustAddress1:{header:'CustAddress1'},
        CustAddress2:{header:'CustAddress2'},
        CustPostalCode:{header:'CustPostalCode'},
        CityId:{header:'CityId'},
        ProvinceId:{header:'ProvinceId'},
        CountryId:{header:'CountryId'},
        DeliveryAddress1:{header:'DeliveryAddress1'},
        DeliveryAddress2:{header:'DeliveryAddress2'},
        DeliveryAddressPostalCode:{header:'DeliveryAddressPostalCode'},
        DeliveryAddressCity:{header:'DeliveryAddressCity'},
        DeliveryAddressProvince:{header:'DeliveryAddressProvince'},
        DeliveryAddressCountry:{header:'DeliveryAddressCountry'},
        ContactPerson2nd:{header:'ContactPerson2nd'},
        ContactPosition2nd:{header:'ContactPosition2nd'},
        ContactPersonMobilePhone2nd:{header:'ContactPersonMobilePhone2nd'},
        ContactPersonEmail2nd:{header:'ContactPersonEmail2nd'},
        ContactPerson3rd:{header:'ContactPerson3rd'},
        ContactPosition3rd:{header:'ContactPosition3rd'},
        ContactPersonMobilePhone3rd:{header:'ContactPersonMobilePhone3rd'},
        ContactPersonEmail3rd:{header:'ContactPersonEmail3rd'},
        Image:{header:'Image'},
        NotesDetails:{header:'NotesDetails'},
        Status:{header:'Status'},
        FirstContactDate:{header:'FirstContactDate'},
        },
    AppEmployee:{Heading:'AppEmployee',
        EmployeeId:{header:'EmployeeId'},
        EmployeeNumber:{header:'EmployeeNumber'},
        Firstname:{header:'Firstname'},
        Middlename:{header:'Middlename'},
        Lastname:{header:'Lastname'},
        Nationality:{header:'Nationality'},
        Dob:{header:'Dob'},
        Gender:{header:'Gender'},
        MaritalStatus:{header:'MaritalStatus'},
        Ethnicity:{header:'Ethnicity'},
        KtpNumber:{header:'KtpNumber'},
        PassportNumber:{header:'PassportNumber'},
        DrivingLicenceNo:{header:'DrivingLicenceNo'},
        AddressLine1:{header:'AddressLine1'},
        AddressLine2:{header:'AddressLine2'},
        CityId:{header:'CityId'},
        CountryId:{header:'CountryId'},
        ProvinceId:{header:'ProvinceId'},
        PostalCode:{header:'PostalCode'},
        HomePhone:{header:'HomePhone'},
        MobilePhone:{header:'MobilePhone'},
        WorkEmail:{header:'WorkEmail'},
        PrivateEmail:{header:'PrivateEmail'},
        JoinedDate:{header:'JoinedDate'},
        ConfirmationDate:{header:'ConfirmationDate'},
        TerminationDate:{header:'TerminationDate'},
        SupervisorName:{header:'SupervisorName'},
        IndirectSupervisorName:{header:'IndirectSupervisorName'},
        FirstLevelApprover:{header:'FirstLevelApprover'},
        SecondLevelApprover:{header:'SecondLevelApprover'},
        ThirdLevelApprover:{header:'ThirdLevelApprover'},
        Notes:{header:'Notes'},
        DepartmentId:{header:'DepartmentId'},
        WorkStationId:{header:'WorkStationId'},
        JobTitleId:{header:'JobTitleId'},
        PayGradeId:{header:'PayGradeId'},
        EmploymentStatusId:{header:'EmploymentStatusId'},
        },
    AppRefCity:{Heading:'AppRefCity',
        CityId:{header:'CityId'},
        Name:{header:'Name'},
        Details:{header:'Details'},
        ProvinceId:{header:'ProvinceId'},
        },
    AppVendor:{Heading:'AppVendor',
        VendorId:{header:'VendorId'},
        VendorNo:{header:'VendorNo'},
        VendorName:{header:'VendorName'},
        VendorType:{header:'VendorType'},
        VendorClassification:{header:'VendorClassification'},
        VendorCategory:{header:'VendorCategory'},
        ContactPerson:{header:'ContactPerson'},
        ContactPosition:{header:'ContactPosition'},
        ContactPersonMobilePhone:{header:'ContactPersonMobilePhone'},
        ContactPersonEmail:{header:'ContactPersonEmail'},
        VendorTaxId:{header:'VendorTaxId'},
        VendorCreditLimit:{header:'VendorCreditLimit'},
        VendorPhone1:{header:'VendorPhone1'},
        VendorPhone2:{header:'VendorPhone2'},
        VendorFax:{header:'VendorFax'},
        VendorEmailCompany:{header:'VendorEmailCompany'},
        VendorWebsite:{header:'VendorWebsite'},
        VendorCurrency:{header:'VendorCurrency'},
        VendorAddress1:{header:'VendorAddress1'},
        VendorAddress2:{header:'VendorAddress2'},
        VendorPostalCode:{header:'VendorPostalCode'},
        CityId:{header:'CityId'},
        ProvinceId:{header:'ProvinceId'},
        CountryId:{header:'CountryId'},
        DeliveryAddress1:{header:'DeliveryAddress1'},
        DeliveryAddress2:{header:'DeliveryAddress2'},
        DeliveryAddressPostalCode:{header:'DeliveryAddressPostalCode'},
        DeliveryAddressCity:{header:'DeliveryAddressCity'},
        DeliveryAddressProvince:{header:'DeliveryAddressProvince'},
        DeliveryAddressCountry:{header:'DeliveryAddressCountry'},
        ContactPerson2nd:{header:'ContactPerson2nd'},
        ContactPosition2nd:{header:'ContactPosition2nd'},
        ContactPersonMobilePhone2nd:{header:'ContactPersonMobilePhone2nd'},
        ContactPersonEmail2nd:{header:'ContactPersonEmail2nd'},
        ContactPerson3rd:{header:'ContactPerson3rd'},
        ContactPosition3rd:{header:'ContactPosition3rd'},
        ContactPersonMobilePhone3rd:{header:'ContactPersonMobilePhone3rd'},
        ContactPersonEmail3rd:{header:'ContactPersonEmail3rd'},
        Image:{header:'Image'},
        NotesDetails:{header:'NotesDetails'},
        Status:{header:'Status'},
        FirstContactDate:{header:'FirstContactDate'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppRefProvince?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppRefProvince = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppRefProvince(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppRefProvince');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appCompanyInfo = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppCompanyInfo(jsonObj,function(err,rows) {
                jsonObj.appCompanyInfo = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appCustomer = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppCustomer(jsonObj,function(err,rows) {
                jsonObj.appCustomer = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appEmployee = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppEmployee(jsonObj,function(err,rows) {
                jsonObj.appEmployee = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRefCity = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRefCity(jsonObj,function(err,rows) {
                jsonObj.appRefCity = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appVendor = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppVendor(jsonObj,function(err,rows) {
                jsonObj.appVendor = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppRefProvinceReadPage',parameter);
    }    
    Promise.all([readAppRefProvince,appCompanyInfo,appCustomer,appEmployee,appRefCity,appVendor]).then(sendResult);
});

module.exports = router;
