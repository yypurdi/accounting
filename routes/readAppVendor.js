/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppVendorRead',
    Heading:'AppVendor',
    VendorId:{label :'VendorId'},
    VendorNo:{label :'VendorNo'},
    VendorName:{label :'VendorName'},
    VendorType:{label :'VendorType'},
    VendorClassification:{label :'VendorClassification'},
    VendorCategory:{label :'VendorCategory'},
    ContactPerson:{label :'ContactPerson'},
    ContactPosition:{label :'ContactPosition'},
    ContactPersonMobilePhone:{label :'ContactPersonMobilePhone'},
    ContactPersonEmail:{label :'ContactPersonEmail'},
    VendorTaxId:{label :'VendorTaxId'},
    VendorCreditLimit:{label :'VendorCreditLimit'},
    VendorPhone1:{label :'VendorPhone1'},
    VendorPhone2:{label :'VendorPhone2'},
    VendorFax:{label :'VendorFax'},
    VendorEmailCompany:{label :'VendorEmailCompany'},
    VendorWebsite:{label :'VendorWebsite'},
    VendorCurrency:{label :'VendorCurrency'},
    VendorAddress1:{label :'VendorAddress1'},
    VendorAddress2:{label :'VendorAddress2'},
    VendorPostalCode:{label :'VendorPostalCode'},
    CityId:{label :'CityId'},
    ProvinceId:{label :'ProvinceId'},
    CountryId:{label :'CountryId'},
    DeliveryAddress1:{label :'DeliveryAddress1'},
    DeliveryAddress2:{label :'DeliveryAddress2'},
    DeliveryAddressPostalCode:{label :'DeliveryAddressPostalCode'},
    DeliveryAddressCity:{label :'DeliveryAddressCity'},
    DeliveryAddressProvince:{label :'DeliveryAddressProvince'},
    DeliveryAddressCountry:{label :'DeliveryAddressCountry'},
    ContactPerson2nd:{label :'ContactPerson2nd'},
    ContactPosition2nd:{label :'ContactPosition2nd'},
    ContactPersonMobilePhone2nd:{label :'ContactPersonMobilePhone2nd'},
    ContactPersonEmail2nd:{label :'ContactPersonEmail2nd'},
    ContactPerson3rd:{label :'ContactPerson3rd'},
    ContactPosition3rd:{label :'ContactPosition3rd'},
    ContactPersonMobilePhone3rd:{label :'ContactPersonMobilePhone3rd'},
    ContactPersonEmail3rd:{label :'ContactPersonEmail3rd'},
    Image:{label :'Image'},
    NotesDetails:{label :'NotesDetails'},
    Status:{label :'Status'},
    FirstContactDate:{label :'FirstContactDate'},
    AppApAging:{Heading:'AppApAging',
        ApAgingId:{header:'ApAgingId'},
        VendorId:{header:'VendorId'},
        ReferenceNo:{header:'ReferenceNo'},
        Debit:{header:'Debit'},
        Credit:{header:'Credit'},
        ApDueDate:{header:'ApDueDate'},
        CurrentDate:{header:'CurrentDate'},
        Age:{header:'Age'},
        },
    AppApOpeningBalance:{Heading:'AppApOpeningBalance',
        ApOpeningBalanceId:{header:'ApOpeningBalanceId'},
        VendorId:{header:'VendorId'},
        Date:{header:'Date'},
        InvoiceNo:{header:'InvoiceNo'},
        PurchaseOrderNo:{header:'PurchaseOrderNo'},
        CurrencyId:{header:'CurrencyId'},
        PayableValue:{header:'PayableValue'},
        TermOfPaymentId:{header:'TermOfPaymentId'},
        },
    AppApVendorDetail:{Heading:'AppApVendorDetail',
        ApVendorDetailId:{header:'ApVendorDetailId'},
        VendorId:{header:'VendorId'},
        Date:{header:'Date'},
        Note:{header:'Note'},
        Debit:{header:'Debit'},
        Credit:{header:'Credit'},
        DebitBalance:{header:'DebitBalance'},
        CreditBalance:{header:'CreditBalance'},
        Balance:{header:'Balance'},
        ReferenceNo:{header:'ReferenceNo'},
        ArDueDate:{header:'ArDueDate'},
        Status:{header:'Status'},
        },
    AppProductStockInfo:{Heading:'AppProductStockInfo',
        ProductStockInfoId:{header:'ProductStockInfoId'},
        QtyInStock:{header:'QtyInStock'},
        OrderedToVendor:{header:'OrderedToVendor'},
        OrderedByCustomer:{header:'OrderedByCustomer'},
        MinimumInventory:{header:'MinimumInventory'},
        MinimumOrder:{header:'MinimumOrder'},
        SalesForecast:{header:'SalesForecast'},
        BuyingPrice:{header:'BuyingPrice'},
        ProductId:{header:'ProductId'},
        BuyingPriceTax:{header:'BuyingPriceTax'},
        SellingUnitPriceTax:{header:'SellingUnitPriceTax'},
        UnitCostOrCogs:{header:'UnitCostOrCogs'},
        CogsDepartment:{header:'CogsDepartment'},
        LocationMaster:{header:'LocationMaster'},
        DeliveryTimeIndays:{header:'DeliveryTimeIndays'},
        CurrentSellingPrice:{header:'CurrentSellingPrice'},
        MainVendor:{header:'MainVendor'},
        },
    AppSummaryApAging:{Heading:'AppSummaryApAging',
        ApAgingId:{header:'ApAgingId'},
        VendorId:{header:'VendorId'},
        CurrentDate:{header:'CurrentDate'},
        Day030:{header:'Day030'},
        Day3060:{header:'Day3060'},
        Day6090:{header:'Day6090'},
        DayMoreThan90:{header:'DayMoreThan90'},
        },
    AppSummaryApVendor:{Heading:'AppSummaryApVendor',
        SummaryApVendorId:{header:'SummaryApVendorId'},
        VendorId:{header:'VendorId'},
        Date:{header:'Date'},
        BeginningBalanceDebit:{header:'BeginningBalanceDebit'},
        BeginningBalanceCredit:{header:'BeginningBalanceCredit'},
        DebitMutation:{header:'DebitMutation'},
        CreditMutation:{header:'CreditMutation'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        BeginningBalance:{header:'BeginningBalance'},
        DeltaFromBegToEnd:{header:'DeltaFromBegToEnd'},
        EndingBalance:{header:'EndingBalance'},
        Paid:{header:'Paid'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppVendor?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppVendor = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppVendor(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppVendor');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appApAging = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppApAging(jsonObj,function(err,rows) {
                jsonObj.appApAging = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appApOpeningBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppApOpeningBalance(jsonObj,function(err,rows) {
                jsonObj.appApOpeningBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appApVendorDetail = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppApVendorDetail(jsonObj,function(err,rows) {
                jsonObj.appApVendorDetail = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appProductStockInfo = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppProductStockInfo(jsonObj,function(err,rows) {
                jsonObj.appProductStockInfo = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appSummaryApAging = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppSummaryApAging(jsonObj,function(err,rows) {
                jsonObj.appSummaryApAging = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appSummaryApVendor = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppSummaryApVendor(jsonObj,function(err,rows) {
                jsonObj.appSummaryApVendor = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppVendorReadPage',parameter);
    }    
    Promise.all([readAppVendor,appApAging,appApOpeningBalance,appApVendorDetail,appProductStockInfo,appSummaryApAging,appSummaryApVendor]).then(sendResult);
});

module.exports = router;
