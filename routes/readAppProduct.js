/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppProductRead',
    Heading:'AppProduct',
    ProductId:{label :'ProductId'},
    ProductCode:{label :'ProductCode'},
    ProductDesc:{label :'ProductDesc'},
    BaseUnit:{label :'BaseUnit'},
    ReportUnit:{label :'ReportUnit'},
    ProductGroup1st:{label :'ProductGroup1st'},
    ProductGroup2nd:{label :'ProductGroup2nd'},
    ProductGroup3rd:{label :'ProductGroup3rd'},
    ProductGroup4th:{label :'ProductGroup4th'},
    AliasCode:{label :'AliasCode'},
    IsUseSerialNumber:{label :'IsUseSerialNumber'},
    IsUseLot:{label :'IsUseLot'},
    IsConsignment:{label :'IsConsignment'},
    IsNotActive:{label :'IsNotActive'},
    IsSeasonalProduct:{label :'IsSeasonalProduct'},
    ProductCategoryId:{label :'ProductCategoryId'},
    AppInventoryOpenBalance:{Heading:'AppInventoryOpenBalance',
        InventoryOpeningBalanceId:{header:'InventoryOpeningBalanceId'},
        LocationMaster:{header:'LocationMaster'},
        ProductId:{header:'ProductId'},
        BeginningBalance:{header:'BeginningBalance'},
        UnitCost:{header:'UnitCost'},
        IsSerialNumber:{header:'IsSerialNumber'},
        IsLotNumber:{header:'IsLotNumber'},
        },
    AppProductAcctCode:{Heading:'AppProductAcctCode',
        ProductAcctCodeAndCogsId:{header:'ProductAcctCodeAndCogsId'},
        IsInventory:{header:'IsInventory'},
        IsPurchased:{header:'IsPurchased'},
        IsSold:{header:'IsSold'},
        AcctCodeCogs:{header:'AcctCodeCogs'},
        AcctCodeSales:{header:'AcctCodeSales'},
        AcctCodeSalesReturn:{header:'AcctCodeSalesReturn'},
        AcctCodeInventory:{header:'AcctCodeInventory'},
        AcctCodeConsignment:{header:'AcctCodeConsignment'},
        ProductId:{header:'ProductId'},
        },
    AppProductImage:{Heading:'AppProductImage',
        ProductImageId:{header:'ProductImageId'},
        Image:{header:'Image'},
        ProductId:{header:'ProductId'},
        },
    AppProductSellingPrice:{Heading:'AppProductSellingPrice',
        ProductPriceId:{header:'ProductPriceId'},
        ChangedDate:{header:'ChangedDate'},
        ChangedBy:{header:'ChangedBy'},
        NormalPriceEffectiveDate:{header:'NormalPriceEffectiveDate'},
        CalculationMethod:{header:'CalculationMethod'},
        AmountOfCalculationMethod:{header:'AmountOfCalculationMethod'},
        RoundUp:{header:'RoundUp'},
        SmallestUnit:{header:'SmallestUnit'},
        PricingBase:{header:'PricingBase'},
        IsIncludeTaxToSellingPrice:{header:'IsIncludeTaxToSellingPrice'},
        IsSelectedItem:{header:'IsSelectedItem'},
        CurrentSellingPrice:{header:'CurrentSellingPrice'},
        NewSellingPrice:{header:'NewSellingPrice'},
        EffectiveDateOfNewSellingPrice:{header:'EffectiveDateOfNewSellingPrice'},
        ProductId:{header:'ProductId'},
        },
    AppProductStockInfo:{Heading:'AppProductStockInfo',
        ProductStockInfoId:{header:'ProductStockInfoId'},
        QtyInStock:{header:'QtyInStock'},
        OrderedToVendor:{header:'OrderedToVendor'},
        OrderedByCustomer:{header:'OrderedByCustomer'},
        MinimumInventory:{header:'MinimumInventory'},
        MinimumOrder:{header:'MinimumOrder'},
        SalesForecast:{header:'SalesForecast'},
        BuyingPrice:{header:'BuyingPrice'},
        ProductId:{header:'ProductId'},
        BuyingPriceTax:{header:'BuyingPriceTax'},
        SellingUnitPriceTax:{header:'SellingUnitPriceTax'},
        UnitCostOrCogs:{header:'UnitCostOrCogs'},
        CogsDepartment:{header:'CogsDepartment'},
        LocationMaster:{header:'LocationMaster'},
        DeliveryTimeIndays:{header:'DeliveryTimeIndays'},
        CurrentSellingPrice:{header:'CurrentSellingPrice'},
        MainVendor:{header:'MainVendor'},
        },
    AppStockCard:{Heading:'AppStockCard',
        StockCardId:{header:'StockCardId'},
        ProductId:{header:'ProductId'},
        TransactionDate:{header:'TransactionDate'},
        RefNo:{header:'RefNo'},
        DocType:{header:'DocType'},
        TransactionType:{header:'TransactionType'},
        TransactionQty:{header:'TransactionQty'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppProduct?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppProduct = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppProduct(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppProduct');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appInventoryOpenBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppInventoryOpenBalance(jsonObj,function(err,rows) {
                jsonObj.appInventoryOpenBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appProductAcctCode = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppProductAcctCode(jsonObj,function(err,rows) {
                jsonObj.appProductAcctCode = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appProductImage = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppProductImage(jsonObj,function(err,rows) {
                jsonObj.appProductImage = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appProductSellingPrice = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppProductSellingPrice(jsonObj,function(err,rows) {
                jsonObj.appProductSellingPrice = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appProductStockInfo = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppProductStockInfo(jsonObj,function(err,rows) {
                jsonObj.appProductStockInfo = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appStockCard = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppStockCard(jsonObj,function(err,rows) {
                jsonObj.appStockCard = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppProductReadPage',parameter);
    }    
    Promise.all([readAppProduct,appInventoryOpenBalance,appProductAcctCode,appProductImage,appProductSellingPrice,appProductStockInfo,appStockCard]).then(sendResult);
});

module.exports = router;
