/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppCurrencyRead',
    Heading:'AppCurrency',
    CurrencyId:{label :'CurrencyId'},
    CurrencyCode:{label :'CurrencyCode'},
    CurrencyName:{label :'CurrencyName'},
    CurrencySymbol:{label :'CurrencySymbol'},
    ExchangeRate:{label :'ExchangeRate'},
    ByDate:{label :'ByDate'},
    ControlAccountAr:{label :'ControlAccountAr'},
    ControlAccountAp:{label :'ControlAccountAp'},
    ControlAccountBankPayment:{label :'ControlAccountBankPayment'},
    ControlAccountCashPayment:{label :'ControlAccountCashPayment'},
    IsCurrencyBase:{label :'IsCurrencyBase'},
    IsForeignCurrency:{label :'IsForeignCurrency'},
    AppApOpeningBalance:{Heading:'AppApOpeningBalance',
        ApOpeningBalanceId:{header:'ApOpeningBalanceId'},
        VendorId:{header:'VendorId'},
        Date:{header:'Date'},
        InvoiceNo:{header:'InvoiceNo'},
        PurchaseOrderNo:{header:'PurchaseOrderNo'},
        CurrencyId:{header:'CurrencyId'},
        PayableValue:{header:'PayableValue'},
        TermOfPaymentId:{header:'TermOfPaymentId'},
        },
    AppArOpeningBalance:{Heading:'AppArOpeningBalance',
        ArOpeningBalanceId:{header:'ArOpeningBalanceId'},
        CustomerId:{header:'CustomerId'},
        Date:{header:'Date'},
        InvoiceNo:{header:'InvoiceNo'},
        PurchaseOrderNo:{header:'PurchaseOrderNo'},
        CurrencyId:{header:'CurrencyId'},
        ReceivableValue:{header:'ReceivableValue'},
        TermOfPaymentId:{header:'TermOfPaymentId'},
        },
    AppChartOfAccount:{Heading:'AppChartOfAccount',
        ChartOfAccountId:{header:'ChartOfAccountId'},
        AccountSubClassId:{header:'AccountSubClassId'},
        AccountNo:{header:'AccountNo'},
        AccountName:{header:'AccountName'},
        IsCashOrBank:{header:'IsCashOrBank'},
        IsNotActive:{header:'IsNotActive'},
        CurrencyId:{header:'CurrencyId'},
        DepartmentId:{header:'DepartmentId'},
        NormalBalance:{header:'NormalBalance'},
        },
    AppCurrencyFluctuation:{Heading:'AppCurrencyFluctuation',
        CurrencyFluctuationId:{header:'CurrencyFluctuationId'},
        CurrencyId:{header:'CurrencyId'},
        ByDate:{header:'ByDate'},
        ExchangeRate:{header:'ExchangeRate'},
        },
    AppRptBalanceSheet:{Heading:'AppRptBalanceSheet',
        RptBalanceSheetId:{header:'RptBalanceSheetId'},
        RptBalanceSheetName:{header:'RptBalanceSheetName'},
        DepartmentFrom:{header:'DepartmentFrom'},
        DepartmentTo:{header:'DepartmentTo'},
        CurrencyId:{header:'CurrencyId'},
        AccountClassId:{header:'AccountClassId'},
        AccountSubClassId:{header:'AccountSubClassId'},
        AccountNo:{header:'AccountNo'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        ComparativeEndingBalanceDebit:{header:'ComparativeEndingBalanceDebit'},
        ComparativeEndingBalanceCredit:{header:'ComparativeEndingBalanceCredit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    AppRptProfitAndLoss:{Heading:'AppRptProfitAndLoss',
        RptProfitAndLossId:{header:'RptProfitAndLossId'},
        RptProfitAndLossName:{header:'RptProfitAndLossName'},
        DepartmentFrom:{header:'DepartmentFrom'},
        DepartmentTo:{header:'DepartmentTo'},
        CurrencyId:{header:'CurrencyId'},
        Revenue:{header:'Revenue'},
        RevenueExpenditure:{header:'RevenueExpenditure'},
        GrossMargin:{header:'GrossMargin'},
        OperationalExpenditure:{header:'OperationalExpenditure'},
        OperatingProfit:{header:'OperatingProfit'},
        OtherRevenue:{header:'OtherRevenue'},
        OtherExpenditure:{header:'OtherExpenditure'},
        NetProfit:{header:'NetProfit'},
        ComparativeRevenue:{header:'ComparativeRevenue'},
        ComparativeRevenueExpenditure:{header:'ComparativeRevenueExpenditure'},
        ComparativeGrossMargin:{header:'ComparativeGrossMargin'},
        ComparativeOperationalExpenditure:{header:'ComparativeOperationalExpenditure'},
        ComparativeOperatingProfit:{header:'ComparativeOperatingProfit'},
        ComparativeOtherRevenue:{header:'ComparativeOtherRevenue'},
        ComparativeOtherExpenditure:{header:'ComparativeOtherExpenditure'},
        ComparativeNetProfit:{header:'ComparativeNetProfit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    AppRptTrialBalance:{Heading:'AppRptTrialBalance',
        RptTrialBalanceId:{header:'RptTrialBalanceId'},
        RptTrialBalanceName:{header:'RptTrialBalanceName'},
        DepartmentFrom:{header:'DepartmentFrom'},
        DepartmentTo:{header:'DepartmentTo'},
        CurrencyId:{header:'CurrencyId'},
        AccountNo:{header:'AccountNo'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppCurrency?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppCurrency = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppCurrency(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppCurrency');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appApOpeningBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppApOpeningBalance(jsonObj,function(err,rows) {
                jsonObj.appApOpeningBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appArOpeningBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppArOpeningBalance(jsonObj,function(err,rows) {
                jsonObj.appArOpeningBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appChartOfAccount = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppChartOfAccount(jsonObj,function(err,rows) {
                jsonObj.appChartOfAccount = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appCurrencyFluctuation = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppCurrencyFluctuation(jsonObj,function(err,rows) {
                jsonObj.appCurrencyFluctuation = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptBalanceSheet = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptBalanceSheet(jsonObj,function(err,rows) {
                jsonObj.appRptBalanceSheet = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptProfitAndLoss = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptProfitAndLoss(jsonObj,function(err,rows) {
                jsonObj.appRptProfitAndLoss = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptTrialBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptTrialBalance(jsonObj,function(err,rows) {
                jsonObj.appRptTrialBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppCurrencyReadPage',parameter);
    }    
    Promise.all([readAppCurrency,appApOpeningBalance,appArOpeningBalance,appChartOfAccount,appCurrencyFluctuation,appRptBalanceSheet,appRptProfitAndLoss,appRptTrialBalance]).then(sendResult);
});

module.exports = router;
