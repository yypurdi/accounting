/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'AppChartOfAccountRead',
    Heading:'AppChartOfAccount',
    ChartOfAccountId:{label :'ChartOfAccountId'},
    AccountSubClassId:{label :'AccountSubClassId'},
    AccountNo:{label :'AccountNo'},
    AccountName:{label :'AccountName'},
    IsCashOrBank:{label :'IsCashOrBank'},
    IsNotActive:{label :'IsNotActive'},
    CurrencyId:{label :'CurrencyId'},
    DepartmentId:{label :'DepartmentId'},
    NormalBalance:{label :'NormalBalance'},
    AppControlAccount:{Heading:'AppControlAccount',
        ControlAccountId:{header:'ControlAccountId'},
        ControlAccountName:{header:'ControlAccountName'},
        ControlAccountDesc:{header:'ControlAccountDesc'},
        AccountNo:{header:'AccountNo'},
        },
    AppGeneralJournalItems:{Heading:'AppGeneralJournalItems',
        GeneralJournalId:{header:'GeneralJournalId'},
        AccountNo:{header:'AccountNo'},
        DebitAmount:{header:'DebitAmount'},
        CreditAmount:{header:'CreditAmount'},
        JobOrderNo:{header:'JobOrderNo'},
        },
    AppGeneralLedgerDetail:{Heading:'AppGeneralLedgerDetail',
        GeneralLedgerDetailId:{header:'GeneralLedgerDetailId'},
        AccountNo:{header:'AccountNo'},
        Date:{header:'Date'},
        Note:{header:'Note'},
        Debit:{header:'Debit'},
        Credit:{header:'Credit'},
        Balance:{header:'Balance'},
        ReferenceNo:{header:'ReferenceNo'},
        },
    AppOpeningBalance:{Heading:'AppOpeningBalance',
        OpeningBalanceId:{header:'OpeningBalanceId'},
        AccountNo:{header:'AccountNo'},
        BeginningBalance:{header:'BeginningBalance'},
        },
    AppRecurringJournalItems:{Heading:'AppRecurringJournalItems',
        RecurringJournalId:{header:'RecurringJournalId'},
        AccountNo:{header:'AccountNo'},
        DebitAmount:{header:'DebitAmount'},
        CreditAmount:{header:'CreditAmount'},
        JobOrderNo:{header:'JobOrderNo'},
        },
    AppRptBalanceSheet:{Heading:'AppRptBalanceSheet',
        RptBalanceSheetId:{header:'RptBalanceSheetId'},
        RptBalanceSheetName:{header:'RptBalanceSheetName'},
        DepartmentFrom:{header:'DepartmentFrom'},
        DepartmentTo:{header:'DepartmentTo'},
        CurrencyId:{header:'CurrencyId'},
        AccountClassId:{header:'AccountClassId'},
        AccountSubClassId:{header:'AccountSubClassId'},
        AccountNo:{header:'AccountNo'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        ComparativeEndingBalanceDebit:{header:'ComparativeEndingBalanceDebit'},
        ComparativeEndingBalanceCredit:{header:'ComparativeEndingBalanceCredit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    AppRptCashFlow:{Heading:'AppRptCashFlow',
        RptCashFlowId:{header:'RptCashFlowId'},
        RptCashFlowName:{header:'RptCashFlowName'},
        DateFrom:{header:'DateFrom'},
        DateUntil:{header:'DateUntil'},
        AccountNo:{header:'AccountNo'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        DateCreated:{header:'DateCreated'},
        CreatedBy:{header:'CreatedBy'},
        },
    AppSummaryGl:{Heading:'AppSummaryGl',
        GeneralLedgerId:{header:'GeneralLedgerId'},
        AccountNo:{header:'AccountNo'},
        Date:{header:'Date'},
        BeginningBalanceDebit:{header:'BeginningBalanceDebit'},
        BeginningBalanceCredit:{header:'BeginningBalanceCredit'},
        DebitMutation:{header:'DebitMutation'},
        CreditMutation:{header:'CreditMutation'},
        EndingBalanceDebit:{header:'EndingBalanceDebit'},
        EndingBalanceCredit:{header:'EndingBalanceCredit'},
        BeginningBalance:{header:'BeginningBalance'},
        DeltaFromBegToEnd:{header:'DeltaFromBegToEnd'},
        EndingBalance:{header:'EndingBalance'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readAppChartOfAccount?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readAppChartOfAccount = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readAppChartOfAccount(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchAppChartOfAccount');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var appControlAccount = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppControlAccount(jsonObj,function(err,rows) {
                jsonObj.appControlAccount = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appGeneralJournalItems = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppGeneralJournalItems(jsonObj,function(err,rows) {
                jsonObj.appGeneralJournalItems = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appGeneralLedgerDetail = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppGeneralLedgerDetail(jsonObj,function(err,rows) {
                jsonObj.appGeneralLedgerDetail = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appOpeningBalance = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppOpeningBalance(jsonObj,function(err,rows) {
                jsonObj.appOpeningBalance = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRecurringJournalItems = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRecurringJournalItems(jsonObj,function(err,rows) {
                jsonObj.appRecurringJournalItems = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptBalanceSheet = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptBalanceSheet(jsonObj,function(err,rows) {
                jsonObj.appRptBalanceSheet = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appRptCashFlow = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppRptCashFlow(jsonObj,function(err,rows) {
                jsonObj.appRptCashFlow = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var appSummaryGl = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchAppSummaryGl(jsonObj,function(err,rows) {
                jsonObj.appSummaryGl = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('AppChartOfAccountReadPage',parameter);
    }    
    Promise.all([readAppChartOfAccount,appControlAccount,appGeneralJournalItems,appGeneralLedgerDetail,appOpeningBalance,appRecurringJournalItems,appRptBalanceSheet,appRptCashFlow,appSummaryGl]).then(sendResult);
});

module.exports = router;
